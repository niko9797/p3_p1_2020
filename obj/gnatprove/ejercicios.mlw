(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "precision" defined at ejercicios.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__precision
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant precision [#"ejercicios.ads" 5 0 0][@model_trace:2784] [@name:precision] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "bool_val" defined at ejercicios.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__bool_val
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type bool_val =
  < range -1 1 >
 
 val constant first 
   : int
  ensures { result =  (( -1) : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = bool_val, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bool_val__ref =
  { mutable bool_val__content : bool_val }
 
 function bool_val__ref_bool_val__content__projection 
   (a : bool_val__ref) : bool_val =
  a.bool_val__content
 
 meta "model_projection" function bool_val__ref_bool_val__content__projection
 
 meta "inline:no" function bool_val__ref_bool_val__content__projection
 
 val bool_val__havoc 
   (x : bool_val__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bool_val" defined at ejercicios.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__bool_val__rep
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__bool_val.bool_val) : int =
  (Ejercicios__bool_val.bool_val'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__bool_val.bool_val, 
 predicate in_range = Ejercicios__bool_val.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tbin_tD1" defined at ejercicios.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tbin_tD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tbin_tD1 =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tbin_tD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tbin_tD1__ref =
  { mutable tbin_tD1__content : tbin_tD1 }
 
 function tbin_tD1__ref_tbin_tD1__content__projection 
   (a : tbin_tD1__ref) : tbin_tD1 =
  a.tbin_tD1__content
 
 meta "model_projection" function tbin_tD1__ref_tbin_tD1__content__projection
 
 meta "inline:no" function tbin_tD1__ref_tbin_tD1__content__projection
 
 val tbin_tD1__havoc 
   (x : tbin_tD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tbin_tD1" defined at ejercicios.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tbin_tD1__rep
 use        Ejercicios__Tbin_tD1 as Ejercicios__Tbin_tD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__Tbin_tD1.tbin_tD1) : int =
  (Ejercicios__Tbin_tD1.tbin_tD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__Tbin_tD1.tbin_tD1, 
 predicate in_range = Ejercicios__Tbin_tD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tbin_tB" defined at ejercicios.ads:8, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Ejercicios__bool_val
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val__rep as Ejercicios__bool_val__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Ejercicios__bool_val.bool_val
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Ejercicios__bool_val__rep.to_rep (get a temp___idx_154)) = (Ejercicios__bool_val__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Ejercicios__bool_val__rep.to_rep (get a temp___idx_154)) = (Ejercicios__bool_val__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tbin_tB" defined at ejercicios.ads:8, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Ejercicios__bool_val__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Ejercicios__bool_val.component_type, 
 type map = Array__Int__Ejercicios__bool_val.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Ejercicios__bool_val.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tbin_tB" defined at ejercicios.ads:8, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Ejercicios__bool_val_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val__rep as Ejercicios__bool_val__rep
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Ejercicios__bool_val.component_type, 
 function to_rep = Ejercicios__bool_val__rep.to_rep, 
 type map = Array__Int__Ejercicios__bool_val.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Ejercicios__bool_val.get, 
 function bool_eq = Array__Int__Ejercicios__bool_val.bool_eq

end

(* Module for axiomatizing type "Tbin_tB" defined at ejercicios.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tbin_tB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__Tbin_tD1 as Ejercicios__Tbin_tD1
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Ejercicios__Tbin_tD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tbin_tB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tbin_tB__ref =
  { mutable tbin_tB__content : tbin_tB }
 
 function tbin_tB__ref_tbin_tB__content__projection 
   (a : tbin_tB__ref) : tbin_tB =
  a.tbin_tB__content
 
 meta "model_projection" function tbin_tB__ref_tbin_tB__content__projection
 
 meta "inline:no" function tbin_tB__ref_tbin_tB__content__projection
 
 val tbin_tB__havoc 
   (x : tbin_tB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "bin_t" defined at ejercicios.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__bin_t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tt_arrayD1" defined at ejercicios.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tt_arrayD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tt_arrayD1 =
  < range 1 2 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tt_arrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tt_arrayD1__ref =
  { mutable tt_arrayD1__content : tt_arrayD1 }
 
 function tt_arrayD1__ref_tt_arrayD1__content__projection 
   (a : tt_arrayD1__ref) : tt_arrayD1 =
  a.tt_arrayD1__content
 
 meta "model_projection" function tt_arrayD1__ref_tt_arrayD1__content__projection
 
 meta "inline:no" function tt_arrayD1__ref_tt_arrayD1__content__projection
 
 val tt_arrayD1__havoc 
   (x : tt_arrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tt_arrayD1" defined at ejercicios.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tt_arrayD1__rep
 use        Ejercicios__Tt_arrayD1 as Ejercicios__Tt_arrayD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__Tt_arrayD1.tt_arrayD1) : int =
  (Ejercicios__Tt_arrayD1.tt_arrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__Tt_arrayD1.tt_arrayD1, 
 predicate in_range = Ejercicios__Tt_arrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tt_arrayB" defined at ejercicios.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tt_arrayB" defined at ejercicios.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tt_arrayB" defined at ejercicios.ads:10, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Tt_arrayB" defined at ejercicios.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__Tt_arrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Ejercicios__Tt_arrayD1 as Ejercicios__Tt_arrayD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Ejercicios__Tt_arrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tt_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tt_arrayB__ref =
  { mutable tt_arrayB__content : tt_arrayB }
 
 function tt_arrayB__ref_tt_arrayB__content__projection 
   (a : tt_arrayB__ref) : tt_arrayB =
  a.tt_arrayB__content
 
 meta "model_projection" function tt_arrayB__ref_tt_arrayB__content__projection
 
 meta "inline:no" function tt_arrayB__ref_tt_arrayB__content__projection
 
 val tt_arrayB__havoc 
   (x : tt_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "t_array" defined at ejercicios.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__t_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "replacementstr" defined at ejercicios.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__replacechars__replacementstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant replacementstr [#"ejercicios.ads" 12 0 0][@name:replacementStr] [@model_trace:2861] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "replacementstr" defined at ejercicios.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__replacementstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "replacementchar" defined at ejercicios.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__replacechars__replacementchar
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant replacementchar [#"ejercicios.ads" 12 0 0][@name:replacementChar] [@model_trace:2870] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "replacementchar" defined at ejercicios.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__replacementchar___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "bin_num1" defined at ejercicios.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__binadd__bin_num1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val constant bin_num1 [#"ejercicios.ads" 24 0 0][@model_projected] [@model_trace:2932] [@name:bin_num1] 
   : Array__Int__Ejercicios__bool_val.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "bin_num1" defined at ejercicios.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__bin_num1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "bin_num2" defined at ejercicios.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__binadd__bin_num2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val constant bin_num2 [#"ejercicios.ads" 24 0 0][@model_trace:2941] [@model_projected] [@name:bin_num2] 
   : Array__Int__Ejercicios__bool_val.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "bin_num2" defined at ejercicios.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__bin_num2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T8s" defined at ejercicios.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__L7s__T8s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t8s =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t8s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t8s__ref =
  { mutable t8s__content : t8s }
 
 function t8s__ref_t8s__content__projection 
   (a : t8s__ref) : t8s =
  a.t8s__content
 
 meta "model_projection" function t8s__ref_t8s__content__projection
 
 meta "inline:no" function t8s__ref_t8s__content__projection
 
 val t8s__havoc 
   (x : t8s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T8s" defined at ejercicios.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__L7s__T8s__rep
 use        Ejercicios__binadd__L7s__T8s as Ejercicios__binadd__L7s__T8s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__L7s__T8s.t8s) : int =
  (Ejercicios__binadd__L7s__T8s.t8s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__L7s__T8s.t8s, 
 predicate in_range = Ejercicios__binadd__L7s__T8s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T10s" defined at ejercicios.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t10s =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t10s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T10s" defined at ejercicios.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__L9s__T10s__rep
 use        Ejercicios__binadd__L9s__T10s as Ejercicios__binadd__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__L9s__T10s.t10s) : int =
  (Ejercicios__binadd__L9s__T10s.t10s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__L9s__T10s.t10s, 
 predicate in_range = Ejercicios__binadd__L9s__T10s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T11s" defined at ejercicios.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T11s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t11s =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t11s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t11s__ref =
  { mutable t11s__content : t11s }
 
 function t11s__ref_t11s__content__projection 
   (a : t11s__ref) : t11s =
  a.t11s__content
 
 meta "model_projection" function t11s__ref_t11s__content__projection
 
 meta "inline:no" function t11s__ref_t11s__content__projection
 
 val t11s__havoc 
   (x : t11s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T11s" defined at ejercicios.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T11s__rep
 use        Ejercicios__binadd__T11s as Ejercicios__binadd__T11s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__T11s.t11s) : int =
  (Ejercicios__binadd__T11s.t11s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__T11s.t11s, 
 predicate in_range = Ejercicios__binadd__T11s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T12s" defined at ejercicios.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T12s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T15s" defined at ejercicios.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T15s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t15s =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t15s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t15s__ref =
  { mutable t15s__content : t15s }
 
 function t15s__ref_t15s__content__projection 
   (a : t15s__ref) : t15s =
  a.t15s__content
 
 meta "model_projection" function t15s__ref_t15s__content__projection
 
 meta "inline:no" function t15s__ref_t15s__content__projection
 
 val t15s__havoc 
   (x : t15s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T15s" defined at ejercicios.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T15s__rep
 use        Ejercicios__binadd__T15s as Ejercicios__binadd__T15s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__T15s.t15s) : int =
  (Ejercicios__binadd__T15s.t15s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__T15s.t15s, 
 predicate in_range = Ejercicios__binadd__T15s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T16s" defined at ejercicios.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T16s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17s" defined at ejercicios.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T17s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t17s =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t17s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t17s__ref =
  { mutable t17s__content : t17s }
 
 function t17s__ref_t17s__content__projection 
   (a : t17s__ref) : t17s =
  a.t17s__content
 
 meta "model_projection" function t17s__ref_t17s__content__projection
 
 meta "inline:no" function t17s__ref_t17s__content__projection
 
 val t17s__havoc 
   (x : t17s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T17s" defined at ejercicios.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T17s__rep
 use        Ejercicios__binadd__T17s as Ejercicios__binadd__T17s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__T17s.t17s) : int =
  (Ejercicios__binadd__T17s.t17s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__T17s.t17s, 
 predicate in_range = Ejercicios__binadd__T17s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T18s" defined at ejercicios.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T18s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "binadd" defined at ejercicios.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__binadd
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function binadd 
   (bin_num1 : Array__Int__Ejercicios__bool_val.map) (bin_num2 : Array__Int__Ejercicios__bool_val.map) : Array__Int__Ejercicios__bool_val.map
 
 val predicate binadd__function_guard 
   (temp___result_156 : Array__Int__Ejercicios__bool_val.map) (bin_num1 : Array__Int__Ejercicios__bool_val.map) (bin_num2 : Array__Int__Ejercicios__bool_val.map)

end

(* Module for defining the constant "v1" defined at ejercicios.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__mixarray__v1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val constant v1 [#"ejercicios.ads" 36 0 0][@name:v1] [@model_projected] [@model_trace:3158] 
   : Array__Int__Standard__integer.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v1" defined at ejercicios.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__mixarray__v1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v2" defined at ejercicios.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__mixarray__v2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val constant v2 [#"ejercicios.ads" 36 0 0][@name:v2] [@model_projected] [@model_trace:3167] 
   : Array__Int__Standard__integer.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v2" defined at ejercicios.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__mixarray__v2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mixarray" defined at ejercicios.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__mixarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function mixarray 
   (v1 : Array__Int__Standard__integer.map) (v2 : Array__Int__Standard__integer.map) : Array__Int__Standard__integer.map
 
 val predicate mixarray__function_guard 
   (temp___result_157 : Array__Int__Standard__integer.map) (v1 : Array__Int__Standard__integer.map) (v2 : Array__Int__Standard__integer.map)

end

(* Module for defining the constant "num1" defined at ejercicios.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__extendarray__num1
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant num1 [#"ejercicios.ads" 42 0 0][@model_trace:3204] [@name:num1] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "num1" defined at ejercicios.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__extendarray__num1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "num2" defined at ejercicios.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__extendarray__num2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant num2 [#"ejercicios.ads" 42 0 0][@model_trace:3213] [@name:num2] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "num2" defined at ejercicios.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__extendarray__num2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "extendarray" defined at ejercicios.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__extendarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function extendarray 
   (num1 : int) (num2 : int) : Array__Int__Standard__integer.map
 
 val predicate extendarray__function_guard 
   (temp___result_158 : Array__Int__Standard__integer.map) (num1 : int) (num2 : int)

end

(* Module for defining the constant "num" defined at ejercicios.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Ejercicios__multiplicacionvector__num
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant num [#"ejercicios.ads" 45 0 0][@name:num] [@model_trace:3241] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "num" defined at ejercicios.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__multiplicacionvector__num___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TS2bP1" defined at ejercicios.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__replacechars__TS2bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS2bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref =
  { mutable tS2bP1__content : tS2bP1 }
 
 function tS2bP1__ref_tS2bP1__content__projection 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref_tS2bP1__content__projection
 
 meta "inline:no" function tS2bP1__ref_tS2bP1__content__projection
 
 val tS2bP1__havoc 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at ejercicios.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__replacechars__S2b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s2b =
  string
 
 type s2b__ref =
  { mutable s2b__content : s2b }
 
 function s2b__ref_s2b__content__projection 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref_s2b__content__projection
 
 meta "inline:no" function s2b__ref_s2b__content__projection
 
 val s2b__havoc 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at ejercicios.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__replacechars__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at ejercicios.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__replacechars__S1b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  string
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at ejercicios.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t3b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3b__ref =
  { mutable t3b__content : t3b }
 
 function t3b__ref_t3b__content__projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref_t3b__content__projection
 
 meta "inline:no" function t3b__ref_t3b__content__projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3b" defined at ejercicios.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T3b__rep
 use        Ejercicios__binadd__T3b as Ejercicios__binadd__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__T3b.t3b) : int =
  (Ejercicios__binadd__T3b.t3b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__T3b.t3b, 
 predicate in_range = Ejercicios__binadd__T3b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4b" defined at ejercicios.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at ejercicios.adb:71, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t6b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t6b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t6b__ref =
  { mutable t6b__content : t6b }
 
 function t6b__ref_t6b__content__projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref_t6b__content__projection
 
 meta "inline:no" function t6b__ref_t6b__content__projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T6b" defined at ejercicios.adb:71, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T6b__rep
 use        Ejercicios__binadd__T6b as Ejercicios__binadd__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__binadd__T6b.t6b) : int =
  (Ejercicios__binadd__T6b.t6b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__binadd__T6b.t6b, 
 predicate in_range = Ejercicios__binadd__T6b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T7b" defined at ejercicios.adb:71, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__binadd__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 type component_type =
  Ejercicios__bool_val.bool_val
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Ejercicios__bool_val.map, 
 function array_bool_eq = Array__Int__Ejercicios__bool_val.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at ejercicios.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__mixarray__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t10b =
  < range 1 2 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t10b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T10b" defined at ejercicios.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__mixarray__T10b__rep
 use        Ejercicios__mixarray__T10b as Ejercicios__mixarray__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__mixarray__T10b.t10b) : int =
  (Ejercicios__mixarray__T10b.t10b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__mixarray__T10b.t10b, 
 predicate in_range = Ejercicios__mixarray__T10b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T11b" defined at ejercicios.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__mixarray__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at ejercicios.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__extendarray__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13b =
  < range 1 2 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13b" defined at ejercicios.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__extendarray__T13b__rep
 use        Ejercicios__extendarray__T13b as Ejercicios__extendarray__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ejercicios__extendarray__T13b.t13b) : int =
  (Ejercicios__extendarray__T13b.t13b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ejercicios__extendarray__T13b.t13b, 
 predicate in_range = Ejercicios__extendarray__T13b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T14b" defined at ejercicios.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Ejercicios__extendarray__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "inputstr" defined at ejercicios.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__replacechars__inputstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val inputstr [#"ejercicios.ads" 12 0 0][@name:inputStr] [@model_projected] [@model_trace:2852]  : Array__Int__Standard__character.map__ref 
 
 val constant inputstr__first [#"ejercicios.ads" 12 0 0][@name:inputStr] [@model_projected] [@model_trace:2852'First] 
   : Standard__integer.integer

 
 val constant inputstr__last [#"ejercicios.ads" 12 0 0][@name:inputStr] [@model_trace:2852'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "inputstr" defined at ejercicios.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__inputstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "num" defined at ejercicios.ads:39, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__mixnumber__num
 use        "_gnatprove_standard".Main
 use        "int".Int

 val num [#"ejercicios.ads" 39 0 0][@model_projected] [@name:num] [@model_trace:3186]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "num" defined at ejercicios.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__mixnumber__num___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "inputarray" defined at ejercicios.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__multiplicacionvector__inputarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val inputarray [#"ejercicios.ads" 45 0 0][@name:inputArray] [@model_projected] [@model_trace:3232]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "inputarray" defined at ejercicios.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__multiplicacionvector__inputarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at ejercicios.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__replacechars__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"ejercicios.adb" 12 0 0][@model_trace:2352] [@model_projected] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at ejercicios.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "k" defined at ejercicios.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__replacechars__k
 use        "_gnatprove_standard".Main
 use        "int".Int

 val k [#"ejercicios.adb" 13 0 0][@model_trace:2362] [@model_projected] [@name:K]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at ejercicios.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at ejercicios.adb:44, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__binadd__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"ejercicios.adb" 44 0 0][@model_trace:2473] [@model_projected] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at ejercicios.adb:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "resultado" defined at ejercicios.adb:45, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__binadd__resultado
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val resultado [#"ejercicios.adb" 45 0 0][@name:resultado] [@model_projected] [@model_trace:2483]  : Array__Int__Ejercicios__bool_val.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "resultado" defined at ejercicios.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__resultado___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "acarreo" defined at ejercicios.adb:46, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__binadd__acarreo
 use        "_gnatprove_standard".Main
 use        "int".Int

 val acarreo [#"ejercicios.adb" 46 0 0][@name:acarreo] [@model_projected] [@model_trace:2497]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "acarreo" defined at ejercicios.adb:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__acarreo___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp" defined at ejercicios.adb:47, created in Gnat2Why.Decls.Translate_Variable *)
module Ejercicios__binadd__temp
 use        "_gnatprove_standard".Main
 use        "int".Int

 val temp [#"ejercicios.adb" 47 0 0][@name:temp] [@model_projected] [@model_trace:2507]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp" defined at ejercicios.adb:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__temp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "replacechars" defined at ejercicios.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__replacechars
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mixnumber" defined at ejercicios.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__mixnumber
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "multiplicacionvector" defined at ejercicios.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ejercicios__multiplicacionvector
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_159 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_160 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for defining the loop exit exception for the loop "L_1" defined at ejercicios.adb:16, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Ejercicios__replacechars__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at ejercicios.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at ejercicios.adb:21, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Ejercicios__replacechars__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at ejercicios.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__replacechars__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at ejercicios.adb:49, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Ejercicios__binadd__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at ejercicios.adb:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ejercicios__binadd__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "bool_val" defined at ejercicios.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__bool_val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  (if (( temp___is_init_161 \/ (Ejercicios__bool_val.first <= Ejercicios__bool_val.last) )) then (
   (Ejercicios__bool_val.dynamic_property Ejercicios__bool_val.first Ejercicios__bool_val.last temp___expr_165)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : int) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "Tbin_tD1" defined at ejercicios.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__Tbin_tD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tbin_tB" defined at ejercicios.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__Tbin_tB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "bin_t" defined at ejercicios.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__bin_t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : Array__Int__Ejercicios__bool_val.map) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_172 : Array__Int__Ejercicios__bool_val.map) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : Array__Int__Ejercicios__bool_val.map) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_174 : Array__Int__Ejercicios__bool_val.map) (temp___skip_top_level_175 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_174 : Array__Int__Ejercicios__bool_val.map) (temp___skip_top_level_175 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_174 : Array__Int__Ejercicios__bool_val.map) (temp___skip_top_level_175 : bool) }

end

(* Module giving axioms for type "Tt_arrayD1" defined at ejercicios.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__Tt_arrayD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tt_arrayB" defined at ejercicios.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__Tt_arrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "t_array" defined at ejercicios.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__t_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_182 : Array__Int__Standard__integer.map) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_182 : Array__Int__Standard__integer.map) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_182 : Array__Int__Standard__integer.map) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_184 : Array__Int__Standard__integer.map) (temp___skip_top_level_185 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_184 : Array__Int__Standard__integer.map) (temp___skip_top_level_185 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_184 : Array__Int__Standard__integer.map) (temp___skip_top_level_185 : bool) }

end

(* Module giving axioms for type "T8s" defined at ejercicios.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__L7s__T8s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10s" defined at ejercicios.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11s" defined at ejercicios.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T11s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12s" defined at ejercicios.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T12s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15s" defined at ejercicios.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T15s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16s" defined at ejercicios.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T16s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17s" defined at ejercicios.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T17s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18s" defined at ejercicios.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T18s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at ejercicios.ads:33, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_192
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function temp_____aggregate_def_192 
   (temp___194 : int) (temp___195 : int) (temp___196 : int) (temp___197 : int) : Array__Int__Ejercicios__bool_val.map

end

(* Module for declaring an abstract function for the aggregate at ejercicios.ads:32, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_202
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function temp_____aggregate_def_202 
   (temp___204 : int) (temp___205 : int) (temp___206 : int) (temp___207 : int) : Array__Int__Ejercicios__bool_val.map

end

(* Module for declaring an abstract function for the aggregate at ejercicios.ads:31, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_212
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function temp_____aggregate_def_212 
   (temp___214 : int) (temp___215 : int) (temp___216 : int) (temp___217 : int) : Array__Int__Ejercicios__bool_val.map

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (( temp___is_init_247 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_251)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : int) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "TS2bP1" defined at ejercicios.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__replacechars__TS2bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S2b" defined at ejercicios.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__replacechars__S2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ejercicios__replacechars__replacementstr as Ejercicios__replacechars__replacementstr
 use        Ejercicios__replacechars__S2b as Ejercicios__replacechars__S2b

 predicate dynamic_invariant [@inline] 
   (temp___expr_258 : Ejercicios__replacechars__S2b.s2b) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) =
  (if (temp___skip_constant_255) then (
   true) else (
   ( (Ejercicios__replacechars__S2b.dynamic_property (Standard__string.first Ejercicios__replacechars__replacementstr.replacementstr) (Standard__string.last Ejercicios__replacechars__replacementstr.replacementstr) (Ejercicios__replacechars__S2b.first temp___expr_258) (Ejercicios__replacechars__S2b.last temp___expr_258)) /\ ( ((Ejercicios__replacechars__S2b.first temp___expr_258) = (Standard__string.first Ejercicios__replacechars__replacementstr.replacementstr)) /\ ((Ejercicios__replacechars__S2b.last temp___expr_258) = (Standard__string.last Ejercicios__replacechars__replacementstr.replacementstr)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_258 : Ejercicios__replacechars__S2b.s2b) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_258 : Ejercicios__replacechars__S2b.s2b) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_260 : Ejercicios__replacechars__S2b.s2b) (temp___skip_top_level_261 : bool) =
  ( ( true /\ ((Ejercicios__replacechars__S2b.first temp___expr_260) = (Standard__string.first Ejercicios__replacechars__replacementstr.replacementstr)) )/\((Ejercicios__replacechars__S2b.last temp___expr_260) = (Standard__string.last Ejercicios__replacechars__replacementstr.replacementstr)) )
 val default_initial_assumption [@inline] 
   (temp___expr_260 : Ejercicios__replacechars__S2b.s2b) (temp___skip_top_level_261 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_260 : Ejercicios__replacechars__S2b.s2b) (temp___skip_top_level_261 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at ejercicios.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__replacechars__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at ejercicios.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__replacechars__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Ejercicios__replacechars__inputstr as Ejercicios__replacechars__inputstr
 use        Ejercicios__replacechars__S1b as Ejercicios__replacechars__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_268 : Ejercicios__replacechars__S1b.s1b) (temp___is_init_264 : bool) (temp___skip_constant_265 : bool) (temp___do_toplevel_266 : bool) (temp___do_typ_inv_267 : bool) =
  (if (temp___skip_constant_265) then (
   true) else (
   ( (Ejercicios__replacechars__S1b.dynamic_property (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last) (Ejercicios__replacechars__S1b.first temp___expr_268) (Ejercicios__replacechars__S1b.last temp___expr_268)) /\ ( ((Ejercicios__replacechars__S1b.first temp___expr_268) = (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first)) /\ ((Ejercicios__replacechars__S1b.last temp___expr_268) = (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_268 : Ejercicios__replacechars__S1b.s1b) (temp___is_init_264 : bool) (temp___skip_constant_265 : bool) (temp___do_toplevel_266 : bool) (temp___do_typ_inv_267 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_268 : Ejercicios__replacechars__S1b.s1b) (temp___is_init_264 : bool) (temp___skip_constant_265 : bool) (temp___do_toplevel_266 : bool) (temp___do_typ_inv_267 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_270 : Ejercicios__replacechars__S1b.s1b) (temp___skip_top_level_271 : bool) =
  ( ( true /\ ((Ejercicios__replacechars__S1b.first temp___expr_270) = (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first)) )/\((Ejercicios__replacechars__S1b.last temp___expr_270) = (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) )
 val default_initial_assumption [@inline] 
   (temp___expr_270 : Ejercicios__replacechars__S1b.s1b) (temp___skip_top_level_271 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_270 : Ejercicios__replacechars__S1b.s1b) (temp___skip_top_level_271 : bool) }

end

(* Module giving axioms for type "T3b" defined at ejercicios.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at ejercicios.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at ejercicios.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at ejercicios.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__binadd__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at ejercicios.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__mixarray__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at ejercicios.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__mixarray__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at ejercicios.adb:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__extendarray__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at ejercicios.adb:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ejercicios__extendarray__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at ejercicios.adb:45, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Ejercicios__binadd__resultado__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function ejercicios__binadd__resultado__aggregate_def 
   (temp___295 : int) (temp___296 : int) (temp___297 : int) (temp___298 : int) : Array__Int__Ejercicios__bool_val.map

end

(* Module for declaring an abstract function for the aggregate at ejercicios.adb:71, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_309
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val function temp_____aggregate_def_309 
   (temp___311 : int) (temp___312 : int) (temp___313 : int) (temp___314 : int) : Array__Int__Ejercicios__bool_val.map

end

(* Module for declaring an abstract function for the aggregate at ejercicios.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_337
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function temp_____aggregate_def_337 
   (temp___339 : int) (temp___340 : int) : Array__Int__Standard__integer.map

end

(* Module for declaring an abstract function for the aggregate at ejercicios.adb:102, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_345
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function temp_____aggregate_def_345 
   (temp___347 : int) (temp___348 : int) : Array__Int__Standard__integer.map

end
(* Module for defining the value of constant "precision" defined at ejercicios.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ejercicios__precision___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__precision as Ejercicios__precision

 axiom precision__def_axiom :
  ((Ejercicios__precision.precision ) = (4 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "replacechars" defined at ejercicios.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__replacechars___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val replacechars 
   (inputstr : Array__Int__Standard__character.map__ref) (inputstr__first : Standard__integer.integer) (inputstr__last : Standard__integer.integer) (replacementstr : Standard__string.string) (replacementchar : int) : unit
  requires {  ( ( ( ( ( [@GP_Pretty_Ada:2901] ((Integer.length (Standard__integer__rep.to_rep inputstr__first) (Standard__integer__rep.to_rep inputstr__last)) <> (0 : int)) ) /\ ( [@GP_Pretty_Ada:2907] ((Standard__string.length replacementstr) <> (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2913] ((Standard__integer__rep.to_rep inputstr__first) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2919] ((Standard__string.first replacementstr) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2923] ( ((0 : int) <= replacementchar) /\ (replacementchar <= (255 : int)) ) ) ) }
  ensures {  (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep inputstr__first) (Standard__integer__rep.to_rep inputstr__last)))) }
  writes {inputstr}

end

(* Module for defining the value of the aggregate at ejercicios.ads:33, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_192___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_192 as Temp_____aggregate_def_192
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 axiom def_axiom :
  (forall temp___194   temp___195   temp___196   temp___197   : int.
   (let temp___193 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_192.temp_____aggregate_def_192 temp___194 temp___195 temp___196 temp___197) in (
    (if (( ( (Ejercicios__bool_val___axiom.dynamic_invariant temp___194 True True True True) /\ (Ejercicios__bool_val___axiom.dynamic_invariant temp___195 True True True True) )/\( (Ejercicios__bool_val___axiom.dynamic_invariant temp___196 True True True True)/\(Ejercicios__bool_val___axiom.dynamic_invariant temp___197 True True True True) ) )) then (
     ( ( ((Array__Int__Ejercicios__bool_val.get temp___193 (1 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) /\ ((Array__Int__Ejercicios__bool_val.get temp___193 (2 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) )/\( ((Array__Int__Ejercicios__bool_val.get temp___193 (3 : int)) = ( -1 : Ejercicios__bool_val.bool_val ))/\((Array__Int__Ejercicios__bool_val.get temp___193 (4 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) ) )) else true)))
  )

end

(* Module for defining the value of the aggregate at ejercicios.ads:32, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_202___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_202 as Temp_____aggregate_def_202
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 axiom def_axiom :
  (forall temp___204   temp___205   temp___206   temp___207   : int.
   (let temp___203 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_202.temp_____aggregate_def_202 temp___204 temp___205 temp___206 temp___207) in (
    (if (( ( (Ejercicios__bool_val___axiom.dynamic_invariant temp___204 True True True True) /\ (Ejercicios__bool_val___axiom.dynamic_invariant temp___205 True True True True) )/\( (Ejercicios__bool_val___axiom.dynamic_invariant temp___206 True True True True)/\(Ejercicios__bool_val___axiom.dynamic_invariant temp___207 True True True True) ) )) then (
     ( ( ((Array__Int__Ejercicios__bool_val.get temp___203 (1 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) /\ ((Array__Int__Ejercicios__bool_val.get temp___203 (2 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) )/\( ((Array__Int__Ejercicios__bool_val.get temp___203 (3 : int)) = ( -1 : Ejercicios__bool_val.bool_val ))/\((Array__Int__Ejercicios__bool_val.get temp___203 (4 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) ) )) else true)))
  )

end

(* Module for defining the value of the aggregate at ejercicios.ads:31, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_212___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_212 as Temp_____aggregate_def_212
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 axiom def_axiom :
  (forall temp___214   temp___215   temp___216   temp___217   : int.
   (let temp___213 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_212.temp_____aggregate_def_212 temp___214 temp___215 temp___216 temp___217) in (
    (if (( ( (Ejercicios__bool_val___axiom.dynamic_invariant temp___214 True True True True) /\ (Ejercicios__bool_val___axiom.dynamic_invariant temp___215 True True True True) )/\( (Ejercicios__bool_val___axiom.dynamic_invariant temp___216 True True True True)/\(Ejercicios__bool_val___axiom.dynamic_invariant temp___217 True True True True) ) )) then (
     ( ( ((Array__Int__Ejercicios__bool_val.get temp___213 (1 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) /\ ((Array__Int__Ejercicios__bool_val.get temp___213 (2 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) )/\( ((Array__Int__Ejercicios__bool_val.get temp___213 (3 : int)) = ( -1 : Ejercicios__bool_val.bool_val ))/\((Array__Int__Ejercicios__bool_val.get temp___213 (4 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) ) )) else true)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "binadd" defined at ejercicios.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__binadd___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Ejercicios__binadd as Ejercicios__binadd
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val__rep as Ejercicios__bool_val__rep
 use        Ejercicios__Tbin_tD1 as Ejercicios__Tbin_tD1
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Ejercicios__bin_t___axiom as Ejercicios__bin_t___axiom
 use        Ejercicios__binadd__T11s as Ejercicios__binadd__T11s
 use        Ejercicios__binadd__T15s as Ejercicios__binadd__T15s
 use        Ejercicios__binadd__T17s as Ejercicios__binadd__T17s
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_192 as Temp_____aggregate_def_192
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_202 as Temp_____aggregate_def_202
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_212 as Temp_____aggregate_def_212
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 val binadd 
   (bin_num1 : Array__Int__Ejercicios__bool_val.map) (bin_num2 : Array__Int__Ejercicios__bool_val.map) : Array__Int__Ejercicios__bool_val.map
  requires {  ( (forall x   [@model_trace:2973] [@name:x]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:2986] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 x)) <> (( -1) : int)) ) )) /\ (forall x   [@name:x] [@model_trace:2991]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:3004] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 x)) <> (( -1) : int)) ) )) ) }
  ensures {  ( ( (result = (Ejercicios__binadd.binadd bin_num1 bin_num2)) /\ (Ejercicios__binadd.binadd__function_guard result bin_num1 bin_num2) )/\( (Ejercicios__bin_t___axiom.dynamic_invariant result True False True True) /\ (if (((old (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) (1 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) (1 : int))) ) = True)) then (
   ((let temp___221 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_212.temp_____aggregate_def_212 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
    (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___221 Ejercicios__binadd__T11s.first Ejercicios__binadd__T11s.last)))
    = True)) else ((if (((old (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) (0 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) (0 : int))) ) = True)) then (
   not ( ((let temp___211 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_202.temp_____aggregate_def_202 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
    (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___211 Ejercicios__binadd__T15s.first Ejercicios__binadd__T15s.last)))
    = True) )) else ((if (((old (Boolean.orb (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) (1 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) (0 : int))) (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) (0 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) (1 : int)))) ) = True)) then (
   ( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get result (1 : int))) = (1 : int)) \/ ((let temp___201 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_192.temp_____aggregate_def_192 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
    (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___201 Ejercicios__binadd__T17s.first Ejercicios__binadd__T17s.last)))
    = True) )) else (
   true)))))) ) ) }
 
 axiom binadd__post_axiom :
  (forall bin_num1   bin_num2   : Array__Int__Ejercicios__bool_val.map [(Ejercicios__binadd.binadd bin_num1 bin_num2)].
   ( ( ( (Ejercicios__bin_t___axiom.dynamic_invariant bin_num1 True True True True) /\ (Ejercicios__bin_t___axiom.dynamic_invariant bin_num2 True True True True) ) /\ ( (forall x   [@model_trace:2973] [@name:x]  : int.
    ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:2986] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 x)) <> (( -1) : int)) ) )) /\ (forall x   [@name:x] [@model_trace:2991]  : int.
    ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:3004] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 x)) <> (( -1) : int)) ) )) ) ) -> (let result = (Ejercicios__binadd.binadd bin_num1 bin_num2) in (
    (if ((Ejercicios__binadd.binadd__function_guard result bin_num1 bin_num2)) then (
     ( ( (if (( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) = (1 : int)) /\ ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) = (1 : int)) )) then (
      ((let temp___233 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_212.temp_____aggregate_def_212 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___233 Ejercicios__binadd__T11s.first Ejercicios__binadd__T11s.last)))
       = True)) else ((if (( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) = (0 : int)) /\ ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) = (0 : int)) )) then (
      not ( ((let temp___230 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_202.temp_____aggregate_def_202 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___230 Ejercicios__binadd__T15s.first Ejercicios__binadd__T15s.last)))
       = True) )) else ((if (( ( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) = (1 : int)) /\ ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) = (0 : int)) ) \/ ( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num1 (1 : int))) = (0 : int)) /\ ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get bin_num2 (1 : int))) = (1 : int)) ) )) then (
      ( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get result (1 : int))) = (1 : int)) \/ ((let temp___227 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_192.temp_____aggregate_def_192 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq result Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___227 Ejercicios__binadd__T17s.first Ejercicios__binadd__T17s.last)))
       = True) )) else (
      true)))))) /\ (Ejercicios__bin_t___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "mixarray" defined at ejercicios.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__mixarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ejercicios__mixarray as Ejercicios__mixarray
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val mixarray 
   (v1 : Array__Int__Standard__integer.map) (v2 : Array__Int__Standard__integer.map) : Array__Int__Standard__integer.map
  requires {  true }
  ensures {  ( ( (result = (Ejercicios__mixarray.mixarray v1 v2)) /\ (Ejercicios__mixarray.mixarray__function_guard result v1 v2) )/\(Ejercicios__t_array___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mixarray__post_axiom :
  (forall v1   v2   : Array__Int__Standard__integer.map [(Ejercicios__mixarray.mixarray v1 v2)].
   ( ( (Ejercicios__t_array___axiom.dynamic_invariant v1 True True True True) /\ (Ejercicios__t_array___axiom.dynamic_invariant v2 True True True True) ) -> (let result = (Ejercicios__mixarray.mixarray v1 v2) in (
    (if ((Ejercicios__mixarray.mixarray__function_guard result v1 v2)) then (
     ( ( true /\ (Ejercicios__t_array___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "mixnumber" defined at ejercicios.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__mixnumber___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom

 val mixnumber 
   (num : int__ref) : unit
  requires {  true }
  ensures {  (Standard__positive___axiom.dynamic_invariant num.int__content True True True True) }
  writes {num}

end

(* Module for declaring a program function (and possibly an axiom) for "extendarray" defined at ejercicios.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__extendarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__extendarray as Ejercicios__extendarray
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val extendarray 
   (num1 : int) (num2 : int) : Array__Int__Standard__integer.map
  requires {  true }
  ensures {  ( ( (result = (Ejercicios__extendarray.extendarray num1 num2)) /\ (Ejercicios__extendarray.extendarray__function_guard result num1 num2) )/\(Ejercicios__t_array___axiom.dynamic_invariant result True False True True) ) }
 
 axiom extendarray__post_axiom :
  (forall num1   num2   : int [(Ejercicios__extendarray.extendarray num1 num2)].
   ( ( (Standard__integer___axiom.dynamic_invariant num1 True True True True) /\ (Standard__integer___axiom.dynamic_invariant num2 True True True True) ) -> (let result = (Ejercicios__extendarray.extendarray num1 num2) in (
    (if ((Ejercicios__extendarray.extendarray__function_guard result num1 num2)) then (
     ( ( true /\ (Ejercicios__t_array___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "multiplicacionvector" defined at ejercicios.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ejercicios__multiplicacionvector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val multiplicacionvector 
   (inputarray : Array__Int__Standard__integer.map__ref) (num : int) : unit
  requires {  true }
  ensures {  (Ejercicios__t_array___axiom.dynamic_invariant inputarray.Array__Int__Standard__integer.map__content True True True True) }
  writes {inputarray}

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "ejercicios" defined at ejercicios.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Ejercicios__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ejercicios__precision as Ejercicios__precision
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ejercicios__precision___axiom as Ejercicios__precision___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"ejercicios.ads" 1 0 0][@GP_Subp:ejercicios.ads:1] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 1 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"ejercicios.ads" 2 0 0] ());
  ([#"ejercicios.ads" 5 0 0] ( [#"ejercicios.ads" 5 0 0] begin ensures {true} let _ = (let _ = (4 : int) in (
   ()))
   in () end ;
  [#"ejercicios.ads" 5 0 0] assume { [#"ejercicios.ads" 5 0 0] (Standard__positive___axiom.dynamic_invariant Ejercicios__precision.precision True False True True) } ));
  ([#"ejercicios.ads" 7 0 0] ());
  ([#"ejercicios.ads" 8 0 0] ());
  ([#"ejercicios.ads" 10 0 0] ());
  ([#"ejercicios.ads" 12 0 0] ());
  ([#"ejercicios.ads" 15 0 0] ());
  ([#"ejercicios.ads" 14 0 0] ());
  ([#"ejercicios.ads" 13 0 0] ());
  ([#"ejercicios.ads" 24 0 0] ());
  ([#"ejercicios.ads" 30 0 0] ());
  ([#"ejercicios.ads" 27 0 0] ());
  ([#"ejercicios.ads" 26 0 0] ());
  ([#"ejercicios.ads" 25 0 0] ());
  ([#"ejercicios.ads" 36 0 0] ());
  ([#"ejercicios.ads" 39 0 0] ());
  ([#"ejercicios.ads" 42 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
  ([#"ejercicios.ads" 45 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"ejercicios.adb" 4 0 0] ());
  ([#"ejercicios.adb" 7 0 0] ());
  ([#"ejercicios.adb" 40 0 0] ());
  ([#"ejercicios.adb" 78 0 0] ());
  ([#"ejercicios.adb" 87 0 0] ());
  ([#"ejercicios.adb" 96 0 0] ());
  ([#"ejercicios.adb" 105 0 0] ());
  ();
  ( [@GP_Sloc:ejercicios.adb:114:1] ([#"ejercicios.adb" 114 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "replacechars" defined at ejercicios.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__replacechars__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string___axiom as Standard__string___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ejercicios__replacechars__inputstr as Ejercicios__replacechars__inputstr
 use        Ejercicios__replacechars__replacementstr as Ejercicios__replacechars__replacementstr
 use        Ejercicios__replacechars__replacementchar as Ejercicios__replacechars__replacementchar
 use        Ejercicios__replacechars__j as Ejercicios__replacechars__j
 use        Ejercicios__replacechars__k as Ejercicios__replacechars__k
 use        Ejercicios__replacechars__L_1 as Ejercicios__replacechars__L_1
 use        Ejercicios__replacechars__L_2 as Ejercicios__replacechars__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__replacechars__j___axiom as Ejercicios__replacechars__j___axiom
 use        Ejercicios__replacechars__k___axiom as Ejercicios__replacechars__k___axiom
 use        Ejercicios__replacechars__L_2___axiom as Ejercicios__replacechars__L_2___axiom
 use        Ejercicios__replacechars__L_1___axiom as Ejercicios__replacechars__L_1___axiom
 use        Ejercicios__replacechars__inputstr___axiom as Ejercicios__replacechars__inputstr___axiom
 use        Ejercicios__replacechars__replacementstr___axiom as Ejercicios__replacechars__replacementstr___axiom
 use        Ejercicios__replacechars__replacementchar___axiom as Ejercicios__replacechars__replacementchar___axiom

 let def [#"ejercicios.ads" 12 0 0][@GP_Subp:ejercicios.ads:12] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 12 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:12 *)
  ;
  [#"ejercicios.ads" 12 0 0] assume { [#"ejercicios.ads" 12 0 0] (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)))) };
  [#"ejercicios.ads" 12 0 0] assume { [#"ejercicios.ads" 12 0 0] (Standard__string___axiom.dynamic_invariant Ejercicios__replacechars__replacementstr.replacementstr True False True True) };
  [#"ejercicios.ads" 12 0 0] assume { [#"ejercicios.ads" 12 0 0] (Standard__character___axiom.dynamic_invariant Ejercicios__replacechars__replacementchar.replacementchar True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:12 *)
  ;
  [#"ejercicios.ads" 12 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((( [#"ejercicios.ads" 12 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__first))) ((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__last)))) ) <> (0 : int))) ((( [#"ejercicios.ads" 12 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
   ()))
   in () end ;
  (Standard__string.length(Ejercicios__replacechars__replacementstr.replacementstr)) ) <> (0 : int))))) (((Standard__integer__rep.to_rep(( [#"ejercicios.ads" 12 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
   ()))
   in () end ;
  Ejercicios__replacechars__inputstr.inputstr__first ))) = (0 : int))))) ((( [#"ejercicios.ads" 12 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
   ()))
   in () end ;
  (Standard__string.first(Ejercicios__replacechars__replacementstr.replacementstr)) ) = (0 : int))))) ((Boolean.andb(((0 : int) <= Ejercicios__replacechars__replacementchar.replacementchar)) ((Ejercicios__replacechars__replacementchar.replacementchar <= (255 : int)))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:12 *)
  ;
  [#"ejercicios.ads" 12 0 0] assume { [#"ejercicios.ads" 12 0 0] ( ( ( ( ( [@GP_Pretty_Ada:2901] ((Integer.length (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) <> (0 : int)) ) /\ ( [@GP_Pretty_Ada:2907] ((Standard__string.length Ejercicios__replacechars__replacementstr.replacementstr) <> (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2913] ((Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2919] ((Standard__string.first Ejercicios__replacechars__replacementstr.replacementstr) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2923] ( ((0 : int) <= Ejercicios__replacechars__replacementchar.replacementchar) /\ (Ejercicios__replacechars__replacementchar.replacementchar <= (255 : int)) ) ) ) };
  [#"ejercicios.ads" 12 0 0] try
   ( ();
   ([#"ejercicios.adb" 7 0 0] ());
   ([#"ejercicios.adb" 7 0 0] ());
   ([#"ejercicios.adb" 12 0 0] ( [#"ejercicios.adb" 12 0 0] (Ejercicios__replacechars__j.j.int__content <- ( (1 : int) ));
   [#"ejercicios.adb" 12 0 0] assume { [#"ejercicios.adb" 12 0 0] (Standard__positive___axiom.dynamic_invariant Ejercicios__replacechars__j.j.int__content True False True True) } ));
   ([#"ejercicios.adb" 13 0 0] ( [#"ejercicios.adb" 13 0 0] (Ejercicios__replacechars__k.k.int__content <- ( (1 : int) ));
   [#"ejercicios.adb" 13 0 0] assume { [#"ejercicios.adb" 13 0 0] (Standard__positive___axiom.dynamic_invariant Ejercicios__replacechars__k.k.int__content True False True True) } ));
   ([#"ejercicios.adb" 21 0 0] ());
   ([#"ejercicios.adb" 16 0 0] ());
   ();
   ( [@GP_Sloc:ejercicios.adb:16:32] ([#"ejercicios.adb" 16 0 0] ( () (* Translation of an Ada loop from ejercicios.adb:16 *)
   ;
   (if ((Ejercicios__replacechars__j.j.int__content <= ([#"ejercicios.adb" 16 0 0] ( [@GP_Id:12] [@vc:annotation] [@comment:      while J<=inputStr'Length loop                        ^ ejercicios.adb:16:24:VC_RANGE_CHECK] [@GP_Shape:L_1_while__cmp__typeconv__length_ref] [@GP_Sloc:ejercicios.adb:16:24] [@GP_Reason:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"ejercicios.adb" 16 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
    ()))
    in () end ;
   (Integer.length((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__first))) ((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__last)))) ))) )))) then (
     try
     (  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
      ()))
      in () end ;
     (let temp___283 [@mlw:proxy_symbol] [@introduced] =  (val _f : Array__Int__Standard__character.map
     ensures { (result = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content)} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__k.k.int__content in (
       ()))
       in () end ;
      (let temp___281 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = Ejercicios__replacechars__k.k.int__content)} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__j.j.int__content in (
        ()))
        in () end ;
       (let temp___280 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
       ensures { (result = Ejercicios__replacechars__j.j.int__content)} 
       in _f) in (
         let temp___286 [@mlw:proxy_symbol] [@introduced] = { int__content = (0 : int) } in 
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop ejercicios.adb:16 *)
         ;
         () (* While loop translating the Ada loop from ejercicios.adb:16 *)
         ;
         (let temp___inv_285 [@mlw:proxy_symbol] [@introduced] = (Ejercicios__replacechars__j.j.int__content <= ([#"ejercicios.adb" 19 0 0] ( [@comment:         pragma Loop_Invariant(J <=  inputStr'Length);                                              ^ ejercicios.adb:19:46:VC_RANGE_CHECK] [@GP_Sloc:ejercicios.adb:19:46] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__pragargs__cmp__typeconv__length_ref] [@GP_Id:9] (Standard__integer.range_check_(( [#"ejercicios.adb" 19 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
          ()))
          in () end ;
         (Integer.length((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__first))) ((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__last)))) ))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"ejercicios.adb" 19 0 0] ( [@GP_Id:10] [@comment:         pragma Loop_Invariant(J <=  inputStr'Length);                                ^ ejercicios.adb:19:32:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:ejercicios.adb:19:32] [@GP_Shape:L_1_while__pragargs__cmp] ( [@GP_Pretty_Ada:2391] [@GP_Sloc:ejercicios.adb:19:32] (Ejercicios__replacechars__j.j.int__content <= (Integer.length (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last))) ) ))
           }
          ( () (* Assume implicit invariants from the loop ejercicios.adb:16 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Ejercicios__replacechars__j.j.int__content True True True True) )/\true ) /\ (Standard__positive___axiom.dynamic_invariant Ejercicios__replacechars__k.k.int__content True True True True) )/\true ) /\ (if (True) then (
           true) else (
           (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)))) )/\true )) ((Ejercicios__replacechars__j.j.int__content <= (Integer.length (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last))))) };
          () (* Check for absence of RTE in the invariant of loop ejercicios.adb:16 *)
          ;
           (temp___286.int__content <- ( Ejercicios__replacechars__j.j.int__content ));
          () (* Loop statements appearing after the loop invariant of loop ejercicios.adb:16 *)
          ;
          ();
          ( [@GP_Sloc:ejercicios.adb:21:41] ([#"ejercicios.adb" 21 0 0] ( () (* Translation of an Ada loop from ejercicios.adb:21 *)
          ;
          (if ((Ejercicios__replacechars__k.k.int__content <= ([#"ejercicios.adb" 21 0 0] ( [@GP_Shape:L_1_while__L_2_while__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Sloc:ejercicios.adb:21:33] [@GP_Reason:VC_RANGE_CHECK] [@comment:         while K<=replacementStr'Length loop                                 ^ ejercicios.adb:21:33:VC_RANGE_CHECK] [@GP_Id:7] (Standard__integer.range_check_(( [#"ejercicios.adb" 21 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
           ()))
           in () end ;
          (Standard__string.length(Ejercicios__replacechars__replacementstr.replacementstr)) ))) )))) then (
            try
            (  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
             ()))
             in () end ;
            (let temp___276 [@mlw:proxy_symbol] [@introduced] =  (val _f : Array__Int__Standard__character.map
            ensures { (result = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content)} 
            in _f) in (
             (  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__k.k.int__content in (
              ()))
              in () end ;
             (let temp___274 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
             ensures { (result = Ejercicios__replacechars__k.k.int__content)} 
             in _f) in (
               let temp___279 [@mlw:proxy_symbol] [@introduced] = { int__content = (0 : int) } in 
               ( () (* First unroling of the loop statements appearing before the loop invariant of loop ejercicios.adb:21 *)
               ;
               () (* While loop translating the Ada loop from ejercicios.adb:21 *)
               ;
               (let temp___inv_278 [@mlw:proxy_symbol] [@introduced] = (Ejercicios__replacechars__k.k.int__content <= ([#"ejercicios.adb" 24 0 0] ( [@GP_Shape:L_1_while__L_2_while__pragargs__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:            pragma Loop_Invariant(K<=replacementStr'Length);                                                    ^ ejercicios.adb:24:52:VC_RANGE_CHECK] [@GP_Id:4] [@GP_Sloc:ejercicios.adb:24:52] (Standard__integer.range_check_(( [#"ejercicios.adb" 24 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
                ()))
                in () end ;
               (Standard__string.length(Ejercicios__replacechars__replacementstr.replacementstr)) ))) ))) in (
                 begin ensures {true} let _ = (let _ = () in (
                 ()))
                 in () end ))
               ;
                while True do
                invariant { 
                 ([#"ejercicios.adb" 24 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:ejercicios.adb:24:35] [@GP_Shape:L_1_while__L_2_while__pragargs__cmp] [@comment:            pragma Loop_Invariant(K<=replacementStr'Length);                                   ^ ejercicios.adb:24:35:VC_LOOP_INVARIANT] [@GP_Id:5] ( [@GP_Pretty_Ada:2412] [@GP_Sloc:ejercicios.adb:24:35] (Ejercicios__replacechars__k.k.int__content <= (Standard__string.length Ejercicios__replacechars__replacementstr.replacementstr)) ) ))
                 }
                ( () (* Assume implicit invariants from the loop ejercicios.adb:21 *)
                ;
                 assume {  (Boolean.andb(( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Ejercicios__replacechars__k.k.int__content True True True True) )/\true ) /\ (if (True) then (
                 true) else (
                 (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)))) )/\(forall temp___277   : int.
                 (if (( ((Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) <= temp___277) /\ (temp___277 <= (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) )) then (
                  (if ((Ejercicios__replacechars__j.j.int__content <> temp___277)) then (
                   ((Array__Int__Standard__character.get Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content temp___277) = (Array__Int__Standard__character.get temp___276 temp___277))) else (
                   true))) else true)) )) ((Ejercicios__replacechars__k.k.int__content <= (Standard__string.length Ejercicios__replacechars__replacementstr.replacementstr)))) };
                () (* Check for absence of RTE in the invariant of loop ejercicios.adb:21 *)
                ;
                 (temp___279.int__content <- ( Ejercicios__replacechars__k.k.int__content ));
                () (* Loop statements appearing after the loop invariant of loop ejercicios.adb:21 *)
                ;
                ();
                ( [@GP_Sloc:ejercicios.adb:26:25] ([#"ejercicios.adb" 26 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:26:43] ([#"ejercicios.adb" 26 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:26:13] ([#"ejercicios.adb" 26 0 0] (if (( ([#"ejercicios.adb" 26 0 0] [#"ejercicios.adb" 26 0 0] (([@branch_id=2415] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content) (( [#"ejercicios.adb" 26 0 0] assert { [#"ejercicios.adb" 26 0 0] ([#"ejercicios.adb" 26 0 0] ( [@comment:            if inputStr(J)=replacementStr(K) then                         ^ ejercicios.adb:26:25:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:ejercicios.adb:26:25] [@GP_Id:1] ( ((Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) <= Ejercicios__replacechars__j.j.int__content) /\ (Ejercicios__replacechars__j.j.int__content <= (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) ) )) };
                Ejercicios__replacechars__j.j.int__content ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Ejercicios__replacechars__replacementstr.replacementstr))) ((  assert {  ([#"ejercicios.adb" 26 0 0] ( [@GP_Sloc:ejercicios.adb:26:43] [@vc:annotation] [@comment:            if inputStr(J)=replacementStr(K) then                                           ^ ejercicios.adb:26:43:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp] [@GP_Id:2] ( ((Standard__string.first Ejercicios__replacechars__replacementstr.replacementstr) <= Ejercicios__replacechars__k.k.int__content) /\ (Ejercicios__replacechars__k.k.int__content <= (Standard__string.last Ejercicios__replacechars__replacementstr.replacementstr)) ) )) };
                Ejercicios__replacechars__k.k.int__content )))))) )));
                ( [@branch_id=2415] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:ejercicios.adb:27:25] ([#"ejercicios.adb" 27 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:27:27] ([#"ejercicios.adb" 27 0 0] [#"ejercicios.adb" 27 0 0] (Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content) (( [#"ejercicios.adb" 27 0 0] assert { [#"ejercicios.adb" 27 0 0] ([#"ejercicios.adb" 27 0 0] ( [@GP_Sloc:ejercicios.adb:27:25] [@comment:               inputStr(J):=replacementChar;                         ^ ejercicios.adb:27:25:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__L_2_while__if__inputstr_assign__ixdcomp] [@GP_Id:0] ( ((Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__first) <= Ejercicios__replacechars__j.j.int__content) /\ (Ejercicios__replacechars__j.j.int__content <= (Standard__integer__rep.to_rep Ejercicios__replacechars__inputstr.inputstr__last)) ) )) };
                 Ejercicios__replacechars__j.j.int__content )) ((Standard__character__rep.of_rep(Ejercicios__replacechars__replacementchar.replacementchar)))) ))) ) )) else (
                 ()))) );
                ( [@GP_Sloc:ejercicios.adb:30:13] ([#"ejercicios.adb" 30 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:30:16] ([#"ejercicios.adb" 30 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:30:14] ([#"ejercicios.adb" 30 0 0] [#"ejercicios.adb" 30 0 0] (Ejercicios__replacechars__k.k.int__content <- ( ([#"ejercicios.adb" 30 0 0] ( [@GP_Shape:L_1_while__L_2_while__k_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:            K:=K+1;                 ^ ejercicios.adb:30:17:VC_OVERFLOW_CHECK] [@GP_Sloc:ejercicios.adb:30:17] [@GP_Id:3] (Standard__integer.range_check_((Ejercicios__replacechars__k.k.int__content + (1 : int)))) )) ))) );
                () (* Check for the exit condition and loop statements appearing before the loop invariant of loop ejercicios.adb:21 *)
                ;
                (if (not ( (Ejercicios__replacechars__k.k.int__content <= ([#"ejercicios.adb" 21 0 0] ( [@GP_Shape:L_1_while__L_2_while__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Sloc:ejercicios.adb:21:33] [@GP_Reason:VC_RANGE_CHECK] [@comment:         while K<=replacementStr'Length loop                                 ^ ejercicios.adb:21:33:VC_RANGE_CHECK] [@GP_Id:7] (Standard__integer.range_check_(( [#"ejercicios.adb" 21 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
                 ()))
                 in () end ;
                (Standard__string.length(Ejercicios__replacechars__replacementstr.replacementstr)) ))) ))) )) then (
                  raise Ejercicios__replacechars__L_2.L_2));
                 begin ensures {true} let _ = (let _ =  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__k.k.int__content in (
                 ()))
                 in () end  in (
                 ()))
                 in () end ;
                 check {  ([#"ejercicios.adb" 23 0 0] ( [@GP_Reason:VC_LOOP_VARIANT] [@vc:annotation] [@GP_Shape:L_1_while__L_2_while] [@comment:            pragma Loop_Variant(Increases => K);             ^ ejercicios.adb:23:13:VC_LOOP_VARIANT] [@GP_Sloc:ejercicios.adb:23:13] [@GP_Id:6] (Ejercicios__replacechars__k.k.int__content > temp___279.int__content) )) };
                (let temp___inv_278 [@mlw:proxy_symbol] [@introduced] = (Ejercicios__replacechars__k.k.int__content <= ([#"ejercicios.adb" 24 0 0] ( [@GP_Shape:L_1_while__L_2_while__pragargs__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:            pragma Loop_Invariant(K<=replacementStr'Length);                                                    ^ ejercicios.adb:24:52:VC_RANGE_CHECK] [@GP_Id:4] [@GP_Sloc:ejercicios.adb:24:52] (Standard__integer.range_check_(( [#"ejercicios.adb" 24 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__replacementstr.replacementstr in (
                 ()))
                 in () end ;
                (Standard__string.length(Ejercicios__replacechars__replacementstr.replacementstr)) ))) ))) in (
                  begin ensures {true} let _ = (let _ = () in (
                  ()))
                  in () end ))
                 )
               done )))
              )))
             )
           with
            Ejercicios__replacechars__L_2.L_2 -> ()
           end)) )) );
          ( [@GP_Sloc:ejercicios.adb:33:10] ([#"ejercicios.adb" 33 0 0] ()) );
          ( [@GP_Sloc:ejercicios.adb:33:11] ([#"ejercicios.adb" 33 0 0] [#"ejercicios.adb" 33 0 0] (Ejercicios__replacechars__k.k.int__content <- ( (1 : int) ))) );
          ( [@GP_Sloc:ejercicios.adb:35:10] ([#"ejercicios.adb" 35 0 0] ()) );
          ( [@GP_Sloc:ejercicios.adb:35:14] ([#"ejercicios.adb" 35 0 0] ()) );
          ( [@GP_Sloc:ejercicios.adb:35:11] ([#"ejercicios.adb" 35 0 0] [#"ejercicios.adb" 35 0 0] (Ejercicios__replacechars__j.j.int__content <- ( ([#"ejercicios.adb" 35 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@vc:annotation] [@comment:         J:= J+1;               ^ ejercicios.adb:35:15:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:ejercicios.adb:35:15] [@GP_Id:8] (Standard__integer.range_check_((Ejercicios__replacechars__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop ejercicios.adb:16 *)
          ;
          (if (not ( (Ejercicios__replacechars__j.j.int__content <= ([#"ejercicios.adb" 16 0 0] ( [@GP_Id:12] [@vc:annotation] [@comment:      while J<=inputStr'Length loop                        ^ ejercicios.adb:16:24:VC_RANGE_CHECK] [@GP_Shape:L_1_while__cmp__typeconv__length_ref] [@GP_Sloc:ejercicios.adb:16:24] [@GP_Reason:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"ejercicios.adb" 16 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
           ()))
           in () end ;
          (Integer.length((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__first))) ((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__last)))) ))) ))) )) then (
            raise Ejercicios__replacechars__L_1.L_1));
           begin ensures {true} let _ = (let _ =  begin ensures {true} let _ = (let _ = Ejercicios__replacechars__j.j.int__content in (
           ()))
           in () end  in (
           ()))
           in () end ;
           check {  ([#"ejercicios.adb" 18 0 0] ( [@GP_Reason:VC_LOOP_VARIANT] [@GP_Shape:L_1_while] [@GP_Id:11] [@vc:annotation] [@GP_Sloc:ejercicios.adb:18:10] [@comment:         pragma Loop_Variant(Increases => J);          ^ ejercicios.adb:18:10:VC_LOOP_VARIANT] (Ejercicios__replacechars__j.j.int__content > temp___286.int__content) )) };
          (let temp___inv_285 [@mlw:proxy_symbol] [@introduced] = (Ejercicios__replacechars__j.j.int__content <= ([#"ejercicios.adb" 19 0 0] ( [@comment:         pragma Loop_Invariant(J <=  inputStr'Length);                                              ^ ejercicios.adb:19:46:VC_RANGE_CHECK] [@GP_Sloc:ejercicios.adb:19:46] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__pragargs__cmp__typeconv__length_ref] [@GP_Id:9] (Standard__integer.range_check_(( [#"ejercicios.adb" 19 0 0] begin ensures {true} let _ = (let _ = Ejercicios__replacechars__inputstr.inputstr.Array__Int__Standard__character.map__content in (
           ()))
           in () end ;
          (Integer.length((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__first))) ((Standard__integer__rep.to_rep(Ejercicios__replacechars__inputstr.inputstr__last)))) ))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
        )))
       )))
      )
    with
     Ejercicios__replacechars__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for defining the value of the aggregate at ejercicios.adb:45, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Ejercicios__binadd__resultado__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Ejercicios__binadd__resultado__aggregate_def as Ejercicios__binadd__resultado__aggregate_def
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 axiom def_axiom :
  (forall temp___295   temp___296   temp___297   temp___298   : int.
   (let temp___294 [@mlw:proxy_symbol] [@introduced] = (Ejercicios__binadd__resultado__aggregate_def.ejercicios__binadd__resultado__aggregate_def temp___295 temp___296 temp___297 temp___298) in (
    (if (( ( (Ejercicios__bool_val___axiom.dynamic_invariant temp___295 True True True True) /\ (Ejercicios__bool_val___axiom.dynamic_invariant temp___296 True True True True) )/\( (Ejercicios__bool_val___axiom.dynamic_invariant temp___297 True True True True)/\(Ejercicios__bool_val___axiom.dynamic_invariant temp___298 True True True True) ) )) then (
     ( ( ((Array__Int__Ejercicios__bool_val.get temp___294 (1 : int)) = ( 0 : Ejercicios__bool_val.bool_val )) /\ ((Array__Int__Ejercicios__bool_val.get temp___294 (2 : int)) = ( 0 : Ejercicios__bool_val.bool_val )) )/\( ((Array__Int__Ejercicios__bool_val.get temp___294 (3 : int)) = ( 0 : Ejercicios__bool_val.bool_val ))/\((Array__Int__Ejercicios__bool_val.get temp___294 (4 : int)) = ( 0 : Ejercicios__bool_val.bool_val )) ) )) else true)))
  )

end

(* Module for defining the value of the aggregate at ejercicios.adb:71, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_309___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_309 as Temp_____aggregate_def_309
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val

 axiom def_axiom :
  (forall temp___311   temp___312   temp___313   temp___314   : int.
   (let temp___310 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_309.temp_____aggregate_def_309 temp___311 temp___312 temp___313 temp___314) in (
    (if (( ( (Ejercicios__bool_val___axiom.dynamic_invariant temp___311 True True True True) /\ (Ejercicios__bool_val___axiom.dynamic_invariant temp___312 True True True True) )/\( (Ejercicios__bool_val___axiom.dynamic_invariant temp___313 True True True True)/\(Ejercicios__bool_val___axiom.dynamic_invariant temp___314 True True True True) ) )) then (
     ( ( ((Array__Int__Ejercicios__bool_val.get temp___310 (1 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) /\ ((Array__Int__Ejercicios__bool_val.get temp___310 (2 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) )/\( ((Array__Int__Ejercicios__bool_val.get temp___310 (3 : int)) = ( -1 : Ejercicios__bool_val.bool_val ))/\((Array__Int__Ejercicios__bool_val.get temp___310 (4 : int)) = ( -1 : Ejercicios__bool_val.bool_val )) ) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "binadd" defined at ejercicios.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__binadd__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__binadd__bin_num1 as Ejercicios__binadd__bin_num1
 use        Ejercicios__binadd__bin_num2 as Ejercicios__binadd__bin_num2
 use        Ejercicios__binadd__j as Ejercicios__binadd__j
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Ejercicios__binadd__resultado as Ejercicios__binadd__resultado
 use        Ejercicios__binadd__acarreo as Ejercicios__binadd__acarreo
 use        Ejercicios__binadd__temp as Ejercicios__binadd__temp
 use        Ejercicios__bool_val as Ejercicios__bool_val
 use        Ejercicios__bool_val__rep as Ejercicios__bool_val__rep
 use        Ejercicios__Tbin_tD1 as Ejercicios__Tbin_tD1
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Ejercicios__bin_t___axiom as Ejercicios__bin_t___axiom
 use        Ejercicios__binadd__T11s as Ejercicios__binadd__T11s
 use        Ejercicios__binadd__T15s as Ejercicios__binadd__T15s
 use        Ejercicios__binadd__T17s as Ejercicios__binadd__T17s
 use        Ejercicios__binadd__L_3 as Ejercicios__binadd__L_3
 use        Temp_____aggregate_def_192 as Temp_____aggregate_def_192
 use        Temp_____aggregate_def_202 as Temp_____aggregate_def_202
 use        Temp_____aggregate_def_212 as Temp_____aggregate_def_212
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Ejercicios__binadd__resultado__aggregate_def as Ejercicios__binadd__resultado__aggregate_def
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Temp_____aggregate_def_309 as Temp_____aggregate_def_309
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Array__Int__Ejercicios__bool_val as Array__Int__Ejercicios__bool_val
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__binadd__j___axiom as Ejercicios__binadd__j___axiom
 use        Ejercicios__binadd__resultado___axiom as Ejercicios__binadd__resultado___axiom
 use        Ejercicios__binadd__resultado__aggregate_def___axiom as Ejercicios__binadd__resultado__aggregate_def___axiom
 use        Ejercicios__binadd__acarreo___axiom as Ejercicios__binadd__acarreo___axiom
 use        Ejercicios__binadd__temp___axiom as Ejercicios__binadd__temp___axiom
 use        Temp_____aggregate_def_309___axiom as Temp_____aggregate_def_309___axiom
 use        Ejercicios__binadd__L_3___axiom as Ejercicios__binadd__L_3___axiom
 use        Ejercicios__bool_val___axiom as Ejercicios__bool_val___axiom
 use        Ejercicios__bin_t___axiom as Ejercicios__bin_t___axiom
 use        Ejercicios__binadd__bin_num1___axiom as Ejercicios__binadd__bin_num1___axiom
 use        Ejercicios__binadd__bin_num2___axiom as Ejercicios__binadd__bin_num2___axiom
 use        Temp_____aggregate_def_212___axiom as Temp_____aggregate_def_212___axiom
 use        Temp_____aggregate_def_202___axiom as Temp_____aggregate_def_202___axiom
 use        Temp_____aggregate_def_192___axiom as Temp_____aggregate_def_192___axiom
 use        Ejercicios__Tbin_tD1___axiom as Ejercicios__Tbin_tD1___axiom
 use        Ejercicios__binadd__T11s___axiom as Ejercicios__binadd__T11s___axiom
 use        Ejercicios__binadd__T15s___axiom as Ejercicios__binadd__T15s___axiom
 use        Ejercicios__binadd__T17s___axiom as Ejercicios__binadd__T17s___axiom

 val ejercicios__binadd__result [@model_projected] [@name:binAdd] [@model_trace:2925@result]  : Array__Int__Ejercicios__bool_val.map__ref 
 
 let def [#"ejercicios.ads" 24 0 0][@GP_Subp:ejercicios.ads:24] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 24 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:24 *)
  ;
  [#"ejercicios.ads" 24 0 0] assume { [#"ejercicios.ads" 24 0 0] (Ejercicios__bin_t___axiom.dynamic_invariant Ejercicios__binadd__bin_num1.bin_num1 True False True True) };
  [#"ejercicios.ads" 24 0 0] assume { [#"ejercicios.ads" 24 0 0] (Ejercicios__bin_t___axiom.dynamic_invariant Ejercicios__binadd__bin_num2.bin_num2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:24 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:24 *)
  ;
  [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(( (let x = [#"ejercicios.ads" 24 0 0] (val _f : int
  in _f) in (
   (if ((Boolean.andb(((1 : int) <= x)) ((x <= (4 : int))))) then (
    [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) (x)))) <> (( -1) : int)) in (
     ()))
     in () end ))))
  ;
  [#"ejercicios.ads" 24 0 0] (val _f : bool
  ensures {[#"ejercicios.ads" 24 0 0] ( (result = True) <-> (forall x [#"ejercicios.ads" 24 0 0]  [@model_trace:2973] [@name:x]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:2986] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 x)) <> (( -1) : int)) ) )) )} 
  in _f) )) (( (let x = [#"ejercicios.ads" 24 0 0] (val _f : int
  in _f) in (
   (if ((Boolean.andb(((1 : int) <= x)) ((x <= (4 : int))))) then (
    [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) (x)))) <> (( -1) : int)) in (
     ()))
     in () end ))))
  ;
  [#"ejercicios.ads" 24 0 0] (val _f : bool
  ensures {[#"ejercicios.ads" 24 0 0] ( (result = True) <-> (forall x [#"ejercicios.ads" 24 0 0]  [@name:x] [@model_trace:2991]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:3004] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 x)) <> (( -1) : int)) ) )) )} 
  in _f) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:24 *)
  ;
  [#"ejercicios.ads" 24 0 0] assume { [#"ejercicios.ads" 24 0 0] ( (forall x [#"ejercicios.ads" 24 0 0]  [@model_trace:2973] [@name:x]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:2986] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 x)) <> (( -1) : int)) ) )) /\ (forall x [#"ejercicios.ads" 24 0 0]  [@name:x] [@model_trace:2991]  : int.
   ( ( ((1 : int) <= x) /\ (x <= (4 : int)) ) -> ( [@GP_Pretty_Ada:3004] ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 x)) <> (( -1) : int)) ) )) ) };
  [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = ( ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) ((1 : int))))) = (0 : int)) && ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((1 : int))))) = (0 : int)) ) in (
   ()))
   in () end ;
  (let temp___292 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.ads" 24 0 0] (val _f : bool
  ensures {[#"ejercicios.ads" 24 0 0] (result = (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 (1 : int))) (0 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 (1 : int))) (0 : int))))} 
  in _f) in (
   ( [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = (Boolean.orb(( ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) ((1 : int))))) = (1 : int)) && ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((1 : int))))) = (0 : int)) )) (( ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) ((1 : int))))) = (0 : int)) && ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((1 : int))))) = (1 : int)) ))) in (
    ()))
    in () end ;
   (let temp___293 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.ads" 24 0 0] (val _f : bool
   ensures {[#"ejercicios.ads" 24 0 0] (result = (Boolean.orb (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 (1 : int))) (1 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 (1 : int))) (0 : int))) (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 (1 : int))) (0 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 (1 : int))) (1 : int)))))} 
   in _f) in (
    ( [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = ( ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) ((1 : int))))) = (1 : int)) && ((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((1 : int))))) = (1 : int)) ) in (
     ()))
     in () end ;
    (let temp___291 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.ads" 24 0 0] (val _f : bool
    ensures {[#"ejercicios.ads" 24 0 0] (result = (Boolean.andb (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num1.bin_num1 (1 : int))) (1 : int)) (Integer.bool_eq (Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__bin_num2.bin_num2 (1 : int))) (1 : int))))} 
    in _f) in (
     ( [#"ejercicios.ads" 24 0 0] begin ensures {true} let _ = (let _ = ( [#"ejercicios.ads" 24 0 0] check { [#"ejercicios.ads" 24 0 0] ([#"ejercicios.ads" 30 0 0] ( [@GP_Sloc:ejercicios.ads:30:8] [@GP_Id:13] [@vc:annotation] [@GP_Reason:VC_DISJOINT_CONTRACT_CASES] [@comment:       Contract_Cases =>        ^ ejercicios.ads:30:8:VC_DISJOINT_CONTRACT_CASES] (((((0 : int) + (if ((temp___291 = True)) then (
      (1 : int)) else (
      (0 : int)))) + (if ((temp___292 = True)) then (
      (1 : int)) else (
      (0 : int)))) + (if ((temp___293 = True)) then (
      (1 : int)) else (
      (0 : int)))) <= (1 : int)) )) };
      check {  ([#"ejercicios.ads" 30 0 0] ( [@GP_Sloc:ejercicios.ads:30:8] [@GP_Id:14] [@GP_Reason:VC_COMPLETE_CONTRACT_CASES] [@comment:       Contract_Cases =>        ^ ejercicios.ads:30:8:VC_COMPLETE_CONTRACT_CASES] [@vc:annotation] (((((0 : int) + (if ((temp___291 = True)) then (
      (1 : int)) else (
      (0 : int)))) + (if ((temp___292 = True)) then (
      (1 : int)) else (
      (0 : int)))) + (if ((temp___293 = True)) then (
      (1 : int)) else (
      (0 : int)))) >= (1 : int)) )) } ) in (
      ()))
      in () end ;
      try
      ( ();
      ([#"ejercicios.adb" 44 0 0] ( [#"ejercicios.adb" 44 0 0] (Ejercicios__binadd__j.j.int__content <- ( (4 : int) ));
      [#"ejercicios.adb" 44 0 0] assume { [#"ejercicios.adb" 44 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__j.j.int__content True False True True) } ));
      ([#"ejercicios.adb" 45 0 0] ( [#"ejercicios.adb" 45 0 0] (Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content <- ( (Ejercicios__binadd__resultado__aggregate_def.ejercicios__binadd__resultado__aggregate_def((0 : int)) ((0 : int)) ((0 : int)) ((0 : int))) ));
      [#"ejercicios.adb" 45 0 0] assume { [#"ejercicios.adb" 45 0 0] (Ejercicios__bin_t___axiom.dynamic_invariant Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content True False True True) } ));
      ([#"ejercicios.adb" 46 0 0] ( [#"ejercicios.adb" 46 0 0] (Ejercicios__binadd__acarreo.acarreo.int__content <- ( (0 : int) ));
      [#"ejercicios.adb" 46 0 0] assume { [#"ejercicios.adb" 46 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__acarreo.acarreo.int__content True False True True) } ));
      ([#"ejercicios.adb" 47 0 0] ( [#"ejercicios.adb" 47 0 0] assume { [#"ejercicios.adb" 47 0 0] (Standard__integer___axiom.default_initial_assumption Ejercicios__binadd__temp.temp.int__content False) };
      [#"ejercicios.adb" 47 0 0] assume { [#"ejercicios.adb" 47 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__temp.temp.int__content False False True True) } ));
      ([#"ejercicios.adb" 49 0 0] ());
      ();
      ( [@GP_Sloc:ejercicios.adb:49:18] ([#"ejercicios.adb" 49 0 0] ( () (* Translation of an Ada loop from ejercicios.adb:49 *)
      ;
      (if ((Ejercicios__binadd__j.j.int__content >= (1 : int))) then (
       [#"ejercicios.adb" 49 0 0] try
        ( [#"ejercicios.adb" 49 0 0] begin ensures {true} let _ = (let _ = Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content in (
         ()))
         in () end ;
        (let temp___303 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.adb" 49 0 0] (val _f : Array__Int__Ejercicios__bool_val.map
        ensures {[#"ejercicios.adb" 49 0 0] (result = Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content)} 
        in _f) in (
         ( [#"ejercicios.adb" 49 0 0] begin ensures {true} let _ = (let _ = Ejercicios__binadd__j.j.int__content in (
          ()))
          in () end ;
         (let temp___302 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.adb" 49 0 0] (val _f : int
         ensures {[#"ejercicios.adb" 49 0 0] (result = Ejercicios__binadd__j.j.int__content)} 
         in _f) in (
          ( [#"ejercicios.adb" 49 0 0] begin ensures {true} let _ = (let _ = Ejercicios__binadd__temp.temp.int__content in (
           ()))
           in () end ;
          (let temp___301 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.adb" 49 0 0] (val _f : int
          ensures {[#"ejercicios.adb" 49 0 0] (result = Ejercicios__binadd__temp.temp.int__content)} 
          in _f) in (
           ( [#"ejercicios.adb" 49 0 0] begin ensures {true} let _ = (let _ = Ejercicios__binadd__j.j.int__content in (
            ()))
            in () end ;
           (let temp___306 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.adb" 49 0 0] (val _f : int
           ensures {[#"ejercicios.adb" 49 0 0] (result = Ejercicios__binadd__j.j.int__content)} 
           in _f) in (
            ( [#"ejercicios.adb" 49 0 0] begin ensures {true} let _ = (let _ = Ejercicios__binadd__acarreo.acarreo.int__content in (
             ()))
             in () end ;
            (let temp___300 [@mlw:proxy_symbol] [@introduced] = [#"ejercicios.adb" 49 0 0] (val _f : int
            ensures {[#"ejercicios.adb" 49 0 0] (result = Ejercicios__binadd__acarreo.acarreo.int__content)} 
            in _f) in (
             [#"ejercicios.adb" 49 0 0] let temp___308 [@mlw:proxy_symbol] [@introduced] = { int__content = (0 : int) } in 
              ( () (* First unroling of the loop statements appearing before the loop invariant of loop ejercicios.adb:49 *)
              ;
              ();
              ( [@GP_Sloc:ejercicios.adb:50:10] ([#"ejercicios.adb" 50 0 0] ()) );
              ( [@GP_Sloc:ejercicios.adb:50:27] ([#"ejercicios.adb" 50 0 0] ()) );
              ( [@GP_Sloc:ejercicios.adb:50:41] ([#"ejercicios.adb" 50 0 0] ()) );
              ( [@GP_Sloc:ejercicios.adb:50:46] ([#"ejercicios.adb" 50 0 0] ()) );
              ( [@GP_Sloc:ejercicios.adb:50:15] ([#"ejercicios.adb" 50 0 0] [#"ejercicios.adb" 50 0 0] (Ejercicios__binadd__temp.temp.int__content <- ( ([#"ejercicios.adb" 50 0 0] ( [@GP_Id:17] [@vc:annotation] [@GP_Shape:L_3_while__temp_assign__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                                            ^ ejercicios.adb:50:44:VC_OVERFLOW_CHECK] [@GP_Sloc:ejercicios.adb:50:44] (Standard__integer.range_check_((((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) (( [#"ejercicios.adb" 50 0 0] assert { [#"ejercicios.adb" 50 0 0] ([#"ejercicios.adb" 50 0 0] ( [@GP_Id:15] [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                           ^ ejercicios.adb:50:27:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:ejercicios.adb:50:27] [@GP_Shape:L_3_while__temp_assign__add__add__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
              Ejercicios__binadd__j.j.int__content ))))) + (Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((  assert {  ([#"ejercicios.adb" 50 0 0] ( [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                                         ^ ejercicios.adb:50:41:VC_INDEX_CHECK] [@GP_Id:16] [@vc:annotation] [@GP_Shape:L_3_while__temp_assign__add__add__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:ejercicios.adb:50:41] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
              Ejercicios__binadd__j.j.int__content )))))) + Ejercicios__binadd__acarreo.acarreo.int__content))) )) ))) );
              () (* While loop translating the Ada loop from ejercicios.adb:49 *)
              ;
              (let temp___inv_307 [@mlw:proxy_symbol] [@introduced] = (Boolean.orb((Ejercicios__binadd__acarreo.acarreo.int__content = (1 : int))) ((Ejercicios__binadd__acarreo.acarreo.int__content = (0 : int)))) in (
                begin ensures {true} let _ = (let _ = (let temp___inv_305 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((temp___306 >= Ejercicios__binadd__j.j.int__content)) ((Ejercicios__binadd__j.j.int__content > (0 : int)))) in (
                 begin ensures {true} let _ = (let _ = () in (
                 ()))
                 in () end ))
                in (
                ()))
                in () end ))
              ;
               while True do
               invariant { 
                ([#"ejercicios.adb" 52 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant(acarreo = 1 or acarreo = 0);                                ^ ejercicios.adb:52:32:VC_LOOP_INVARIANT] [@GP_Id:23] [@GP_Shape:L_3_while__pragargs__or] [@GP_Sloc:ejercicios.adb:52:32] ( [@GP_Pretty_Ada:2546] [@GP_Sloc:ejercicios.adb:52:32] ( (Ejercicios__binadd__acarreo.acarreo.int__content = (1 : int)) \/ (Ejercicios__binadd__acarreo.acarreo.int__content = (0 : int)) ) ) ))
                }
               invariant { 
                ([#"ejercicios.adb" 53 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:ejercicios.adb:53:32] [@comment:         pragma Loop_Invariant(J'Loop_Entry>=J and J>0);                                ^ ejercicios.adb:53:32:VC_LOOP_INVARIANT] [@GP_Shape:L_3_while__pragargs__and] [@GP_Id:22] ( ( [@GP_Sloc:ejercicios.adb:53:32] [@GP_Pretty_Ada:2557] (temp___306 >= Ejercicios__binadd__j.j.int__content) ) /\ ( [@GP_Pretty_Ada:2561] [@GP_Sloc:ejercicios.adb:53:52] (Ejercicios__binadd__j.j.int__content > (0 : int)) ) ) ))
                }
               ( () (* Assume implicit invariants from the loop ejercicios.adb:49 *)
               ;
                assume {  ( ( ( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__acarreo.acarreo.int__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__temp.temp.int__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Ejercicios__binadd__j.j.int__content True True True True) )/\true ) /\ (Ejercicios__bin_t___axiom.dynamic_invariant Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content True True True True) )/\(forall temp___304   : int.
                (if (( (Ejercicios__Tbin_tD1.first <= temp___304) /\ (temp___304 <= Ejercicios__Tbin_tD1.last) )) then (
                 (if (( false /\ ( false /\ false ) )) then (
                  ((Array__Int__Ejercicios__bool_val.get Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content temp___304) = (Array__Int__Ejercicios__bool_val.get temp___303 temp___304))) else (
                  true))) else true)) ) };
               () (* Check for absence of RTE in the invariant of loop ejercicios.adb:49 *)
               ;
                (temp___308.int__content <- ( Ejercicios__binadd__j.j.int__content ));
               () (* Loop statements appearing after the loop invariant of loop ejercicios.adb:49 *)
               ;
               ();
               ( [@GP_Sloc:ejercicios.adb:54:13] ([#"ejercicios.adb" 54 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:54:10] ([#"ejercicios.adb" 54 0 0] (if (( ([#"ejercicios.adb" 54 0 0] [#"ejercicios.adb" 54 0 0] (([@branch_id=2562] Main.spark__branch).bool__content <- ( (Ejercicios__binadd__temp.temp.int__content >= (2 : int)) )));
               ( [@branch_id=2562] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:ejercicios.adb:55:13] ([#"ejercicios.adb" 55 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:55:20] ([#"ejercicios.adb" 55 0 0] [#"ejercicios.adb" 55 0 0] (Ejercicios__binadd__acarreo.acarreo.int__content <- ( (1 : int) ))) );
                ( [@GP_Sloc:ejercicios.adb:56:13] ([#"ejercicios.adb" 56 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:56:23] ([#"ejercicios.adb" 56 0 0] ()) );
                ( [@GP_Sloc:ejercicios.adb:56:25] ([#"ejercicios.adb" 56 0 0] [#"ejercicios.adb" 56 0 0] (Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content <- ( (Array__Int__Ejercicios__bool_val.set(Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content) (( [#"ejercicios.adb" 56 0 0] assert { [#"ejercicios.adb" 56 0 0] ([#"ejercicios.adb" 56 0 0] ( [@GP_Id:18] [@vc:annotation] [@GP_Shape:L_3_while__if__resultado_assign__ixdcomp] [@comment:            resultado(J):=1;                       ^ ejercicios.adb:56:23:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:ejercicios.adb:56:23] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
                Ejercicios__binadd__j.j.int__content )) (( 1 : Ejercicios__bool_val.bool_val ))) ))) ) )) else (
                ( [@GP_Sloc:ejercicios.adb:58:10] (if (( ([#"ejercicios.adb" 58 0 0] [#"ejercicios.adb" 58 0 0] (([@branch_id=2575] Main.spark__branch).bool__content <- ( (Ejercicios__binadd__temp.temp.int__content = (1 : int)) )));
                ( [@branch_id=2575] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:ejercicios.adb:59:13] ([#"ejercicios.adb" 59 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:59:23] ([#"ejercicios.adb" 59 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:59:25] ([#"ejercicios.adb" 59 0 0] [#"ejercicios.adb" 59 0 0] (Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content <- ( (Array__Int__Ejercicios__bool_val.set(Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content) (( [#"ejercicios.adb" 59 0 0] assert { [#"ejercicios.adb" 59 0 0] ([#"ejercicios.adb" 59 0 0] ( [@GP_Sloc:ejercicios.adb:59:23] [@vc:annotation] [@GP_Shape:L_3_while__if__resultado_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] [@comment:            resultado(J):=1;                       ^ ejercicios.adb:59:23:VC_INDEX_CHECK] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
                 Ejercicios__binadd__j.j.int__content )) (( 1 : Ejercicios__bool_val.bool_val ))) ))) );
                 ( [@GP_Sloc:ejercicios.adb:60:13] ([#"ejercicios.adb" 60 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:60:20] ([#"ejercicios.adb" 60 0 0] [#"ejercicios.adb" 60 0 0] (Ejercicios__binadd__acarreo.acarreo.int__content <- ( (0 : int) ))) ) )) else (
                 ( ();
                 ( [@GP_Sloc:ejercicios.adb:62:13] ([#"ejercicios.adb" 62 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:62:23] ([#"ejercicios.adb" 62 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:62:25] ([#"ejercicios.adb" 62 0 0] [#"ejercicios.adb" 62 0 0] (Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content <- ( (Array__Int__Ejercicios__bool_val.set(Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content) (( [#"ejercicios.adb" 62 0 0] assert { [#"ejercicios.adb" 62 0 0] ([#"ejercicios.adb" 62 0 0] ( [@GP_Id:19] [@comment:            resultado(J):=0;                       ^ ejercicios.adb:62:23:VC_INDEX_CHECK] [@GP_Sloc:ejercicios.adb:62:23] [@vc:annotation] [@GP_Shape:L_3_while__if__resultado_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
                 Ejercicios__binadd__j.j.int__content )) (( 0 : Ejercicios__bool_val.bool_val ))) ))) );
                 ( [@GP_Sloc:ejercicios.adb:63:13] ([#"ejercicios.adb" 63 0 0] ()) );
                 ( [@GP_Sloc:ejercicios.adb:63:20] ([#"ejercicios.adb" 63 0 0] [#"ejercicios.adb" 63 0 0] (Ejercicios__binadd__acarreo.acarreo.int__content <- ( (0 : int) ))) ) ))) )))) );
               ( [@GP_Sloc:ejercicios.adb:66:10] ([#"ejercicios.adb" 66 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:66:13] ([#"ejercicios.adb" 66 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:66:11] ([#"ejercicios.adb" 66 0 0] [#"ejercicios.adb" 66 0 0] (Ejercicios__binadd__j.j.int__content <- ( ([#"ejercicios.adb" 66 0 0] ( [@comment:         J:=J-1;              ^ ejercicios.adb:66:14:VC_OVERFLOW_CHECK] [@GP_Sloc:ejercicios.adb:66:14] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:21] [@GP_Shape:L_3_while__j_assign__sub] (Standard__integer.range_check_((Ejercicios__binadd__j.j.int__content - (1 : int)))) )) ))) );
               () (* Check for the exit condition and loop statements appearing before the loop invariant of loop ejercicios.adb:49 *)
               ;
               (if (not ( (Ejercicios__binadd__j.j.int__content >= (1 : int)) )) then (
                 raise Ejercicios__binadd__L_3.L_3));
               ();
               ( [@GP_Sloc:ejercicios.adb:50:10] ([#"ejercicios.adb" 50 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:50:27] ([#"ejercicios.adb" 50 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:50:41] ([#"ejercicios.adb" 50 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:50:46] ([#"ejercicios.adb" 50 0 0] ()) );
               ( [@GP_Sloc:ejercicios.adb:50:15] ([#"ejercicios.adb" 50 0 0] [#"ejercicios.adb" 50 0 0] (Ejercicios__binadd__temp.temp.int__content <- ( ([#"ejercicios.adb" 50 0 0] ( [@GP_Id:17] [@vc:annotation] [@GP_Shape:L_3_while__temp_assign__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                                            ^ ejercicios.adb:50:44:VC_OVERFLOW_CHECK] [@GP_Sloc:ejercicios.adb:50:44] (Standard__integer.range_check_((((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num1.bin_num1) (( [#"ejercicios.adb" 50 0 0] assert { [#"ejercicios.adb" 50 0 0] ([#"ejercicios.adb" 50 0 0] ( [@GP_Id:15] [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                           ^ ejercicios.adb:50:27:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:ejercicios.adb:50:27] [@GP_Shape:L_3_while__temp_assign__add__add__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
               Ejercicios__binadd__j.j.int__content ))))) + (Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(Ejercicios__binadd__bin_num2.bin_num2) ((  assert {  ([#"ejercicios.adb" 50 0 0] ( [@comment:         temp := bin_num1(J) + bin_num2(J) + acarreo;                                         ^ ejercicios.adb:50:41:VC_INDEX_CHECK] [@GP_Id:16] [@vc:annotation] [@GP_Shape:L_3_while__temp_assign__add__add__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:ejercicios.adb:50:41] ( (Ejercicios__Tbin_tD1.first <= Ejercicios__binadd__j.j.int__content) /\ (Ejercicios__binadd__j.j.int__content <= Ejercicios__Tbin_tD1.last) ) )) };
               Ejercicios__binadd__j.j.int__content )))))) + Ejercicios__binadd__acarreo.acarreo.int__content))) )) ))) );
                begin ensures {true} let _ = (let _ =  begin ensures {true} let _ = (let _ = Ejercicios__binadd__j.j.int__content in (
                ()))
                in () end  in (
                ()))
                in () end ;
                check {  ([#"ejercicios.adb" 51 0 0] ( [@GP_Reason:VC_LOOP_VARIANT] [@vc:annotation] [@comment:         pragma Loop_Variant(Decreases => J);          ^ ejercicios.adb:51:10:VC_LOOP_VARIANT] [@GP_Id:24] [@GP_Shape:L_3_while] [@GP_Sloc:ejercicios.adb:51:10] (Ejercicios__binadd__j.j.int__content < temp___308.int__content) )) };
               (let temp___inv_307 [@mlw:proxy_symbol] [@introduced] = (Boolean.orb((Ejercicios__binadd__acarreo.acarreo.int__content = (1 : int))) ((Ejercicios__binadd__acarreo.acarreo.int__content = (0 : int)))) in (
                 begin ensures {true} let _ = (let _ = (let temp___inv_305 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((temp___306 >= Ejercicios__binadd__j.j.int__content)) ((Ejercicios__binadd__j.j.int__content > (0 : int)))) in (
                  begin ensures {true} let _ = (let _ = () in (
                  ()))
                  in () end ))
                 in (
                 ()))
                 in () end ))
                )
              done )))
             )))
            )))
           )))
          )))
         )
       with
        Ejercicios__binadd__L_3.L_3 -> ()
       end)) )) );
      ( [@GP_Sloc:ejercicios.adb:70:10] ([#"ejercicios.adb" 70 0 0] ()) );
      ( [@GP_Sloc:ejercicios.adb:70:7] ([#"ejercicios.adb" 70 0 0] (if (( ([#"ejercicios.adb" 70 0 0] [#"ejercicios.adb" 70 0 0] (([@branch_id=2600] Main.spark__branch).bool__content <- ( (Ejercicios__binadd__acarreo.acarreo.int__content = (1 : int)) )));
      ( [@branch_id=2600] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:ejercicios.adb:71:10] ([#"ejercicios.adb" 71 0 0] ( [#"ejercicios.adb" 71 0 0] (ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content <- ( (Temp_____aggregate_def_309.temp_____aggregate_def_309((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int))) ));
       [#"ejercicios.adb" 71 0 0] raise Return__exc )) ) )) else (
       ( ();
       ( [@GP_Sloc:ejercicios.adb:73:17] ([#"ejercicios.adb" 73 0 0] ()) );
       ( [@GP_Sloc:ejercicios.adb:73:10] ([#"ejercicios.adb" 73 0 0] ( [#"ejercicios.adb" 73 0 0] (ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content <- ( Ejercicios__binadd__resultado.resultado.Array__Int__Ejercicios__bool_val.map__content ));
       [#"ejercicios.adb" 73 0 0] raise Return__exc )) ) )))) );
       raise Return__exc )
     with
      Return__exc -> ()
     end;
      begin ensures {true} let _ = (let _ = True in (
      ()))
      in () end ;
      begin ensures {true} let _ = (let _ = (if (temp___291) then (
      (let temp___319 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_212.temp_____aggregate_def_212((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int))) in (
       (Array__Int__Ejercicios__bool_val.bool_eq(ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content) (Ejercicios__Tbin_tD1.first) (Ejercicios__Tbin_tD1.last) (temp___319) (Ejercicios__binadd__T11s.first) (Ejercicios__binadd__T11s.last))))
     ) else (
      True)) in (
      ()))
      in () end ;
      assert {  ([#"ejercicios.ads" 31 0 0] ( [@GP_Reason:VC_CONTRACT_CASE] [@vc:annotation] [@GP_Sloc:ejercicios.ads:31:50] [@comment:         ((bin_num1(1)=1 and then bin_num2(1)=1) => binAdd'Result=(-1,-1,-1,-1),                                                  ^ ejercicios.ads:31:50:VC_CONTRACT_CASE] [@GP_Id:25] [@GP_Shape:pragargs__aggr] (if ((temp___291 = True)) then (
      ((let temp___322 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_212.temp_____aggregate_def_212 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___322 Ejercicios__binadd__T11s.first Ejercicios__binadd__T11s.last)))
       = True)) else true) )) };
      begin ensures {true} let _ = (let _ = (if (temp___292) then (
      not ( (let temp___325 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_202.temp_____aggregate_def_202((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int))) in (
       (Array__Int__Ejercicios__bool_val.bool_eq(ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content) (Ejercicios__Tbin_tD1.first) (Ejercicios__Tbin_tD1.last) (temp___325) (Ejercicios__binadd__T15s.first) (Ejercicios__binadd__T15s.last))))
       )) else (
      True)) in (
      ()))
      in () end ;
      assert {  ([#"ejercicios.ads" 32 0 0] ( [@GP_Reason:VC_CONTRACT_CASE] [@vc:annotation] [@GP_Id:26] [@GP_Sloc:ejercicios.ads:32:50] [@GP_Shape:pragargs__aggr] [@comment:          (bin_num1(1)=0 and then bin_num2(1)=0) => binAdd'Result/=(-1,-1,-1,-1),                                                  ^ ejercicios.ads:32:50:VC_CONTRACT_CASE] (if ((temp___292 = True)) then (
      not ( ((let temp___328 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_202.temp_____aggregate_def_202 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___328 Ejercicios__binadd__T15s.first Ejercicios__binadd__T15s.last)))
       = True) )) else true) )) };
      begin ensures {true} let _ = (let _ = (if (temp___293) then (
      (Boolean.orb(((Ejercicios__bool_val__rep.to_rep((Array__Int__Ejercicios__bool_val.get(ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content) ((1 : int))))) = (1 : int))) ((let temp___331 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_192.temp_____aggregate_def_192((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int))) in (
       (Array__Int__Ejercicios__bool_val.bool_eq(ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content) (Ejercicios__Tbin_tD1.first) (Ejercicios__Tbin_tD1.last) (temp___331) (Ejercicios__binadd__T17s.first) (Ejercicios__binadd__T17s.last))))
      ))) else (
      True)) in (
      ()))
      in () end ;
      assert {  ([#"ejercicios.ads" 33 0 0] ( [@GP_Sloc:ejercicios.ads:33:93] [@GP_Reason:VC_CONTRACT_CASE] [@vc:annotation] [@comment:         ((bin_num1(1)=1 and then bin_num2(1)=0) or (bin_num1(1)=0 and then bin_num2(1)=1)) => (binAdd'Result(1)=1) or (binAdd'Result=(-1,-1,-1,-1)))                                                                                             ^ ejercicios.ads:33:93:VC_CONTRACT_CASE] [@GP_Id:27] [@GP_Shape:pragargs__aggr] (if ((temp___293 = True)) then (
      ( ((Ejercicios__bool_val__rep.to_rep (Array__Int__Ejercicios__bool_val.get ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content (1 : int))) = (1 : int)) \/ ((let temp___334 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_192.temp_____aggregate_def_192 (( -1) : int) (( -1) : int) (( -1) : int) (( -1) : int)) in (
       (Array__Int__Ejercicios__bool_val.bool_eq ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content Ejercicios__Tbin_tD1.first Ejercicios__Tbin_tD1.last temp___334 Ejercicios__binadd__T17s.first Ejercicios__binadd__T17s.last)))
       = True) )) else true) )) };
     ejercicios__binadd__result.Array__Int__Ejercicios__bool_val.map__content )))
     )))
    )))
   )
end

(* Module for defining the value of the aggregate at ejercicios.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_337___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_337 as Temp_____aggregate_def_337
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___339   temp___340   : int.
   (let temp___338 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_337.temp_____aggregate_def_337 temp___339 temp___340) in (
    (if (( (Standard__integer___axiom.dynamic_invariant temp___339 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___340 True True True True) )) then (
     ( ((Array__Int__Standard__integer.get temp___338 (1 : int)) = ( 0 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___338 (2 : int)) = ( 0 : Standard__integer.integer )) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "mixarray" defined at ejercicios.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__mixarray__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ejercicios__mixarray__v1 as Ejercicios__mixarray__v1
 use        Ejercicios__mixarray__v2 as Ejercicios__mixarray__v2
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_337 as Temp_____aggregate_def_337
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Temp_____aggregate_def_337___axiom as Temp_____aggregate_def_337___axiom
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Ejercicios__mixarray__v1___axiom as Ejercicios__mixarray__v1___axiom
 use        Ejercicios__mixarray__v2___axiom as Ejercicios__mixarray__v2___axiom

 val ejercicios__mixarray__result [@name:mixArray] [@model_projected] [@model_trace:3151@result]  : Array__Int__Standard__integer.map__ref 
 
 let def [#"ejercicios.ads" 36 0 0][@GP_Subp:ejercicios.ads:36] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 36 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:36 *)
  ;
  [#"ejercicios.ads" 36 0 0] assume { [#"ejercicios.ads" 36 0 0] (Ejercicios__t_array___axiom.dynamic_invariant Ejercicios__mixarray__v1.v1 True False True True) };
  [#"ejercicios.ads" 36 0 0] assume { [#"ejercicios.ads" 36 0 0] (Ejercicios__t_array___axiom.dynamic_invariant Ejercicios__mixarray__v2.v2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:36 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:36 *)
  ;
  [#"ejercicios.ads" 36 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:36 *)
  ;
  [#"ejercicios.ads" 36 0 0] try
   ( ();
   ( [@GP_Sloc:ejercicios.adb:84:7] ([#"ejercicios.adb" 84 0 0] ( [#"ejercicios.adb" 84 0 0] (ejercicios__mixarray__result.Array__Int__Standard__integer.map__content <- ( (Temp_____aggregate_def_337.temp_____aggregate_def_337((0 : int)) ((0 : int))) ));
   [#"ejercicios.adb" 84 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  ejercicios__mixarray__result.Array__Int__Standard__integer.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "mixnumber" defined at ejercicios.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__mixnumber__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ejercicios__mixnumber__num as Ejercicios__mixnumber__num
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ejercicios__mixnumber__num___axiom as Ejercicios__mixnumber__num___axiom

 let def [#"ejercicios.ads" 39 0 0][@GP_Subp:ejercicios.ads:39] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 39 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:39 *)
  ;
  [#"ejercicios.ads" 39 0 0] assume { [#"ejercicios.ads" 39 0 0] (Standard__positive___axiom.dynamic_invariant Ejercicios__mixnumber__num.num.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:39 *)
  ;
  [#"ejercicios.ads" 39 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:39 *)
  ;
  [#"ejercicios.ads" 39 0 0] try
   ( ();
   ( [@GP_Sloc:ejercicios.adb:93:7] ([#"ejercicios.adb" 93 0 0] ()) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for defining the value of the aggregate at ejercicios.adb:102, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_345___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_345 as Temp_____aggregate_def_345
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___347   temp___348   : int.
   (let temp___346 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_345.temp_____aggregate_def_345 temp___347 temp___348) in (
    (if (( (Standard__integer___axiom.dynamic_invariant temp___347 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___348 True True True True) )) then (
     ( ((Array__Int__Standard__integer.get temp___346 (1 : int)) = ( 0 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___346 (2 : int)) = ( 0 : Standard__integer.integer )) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "extendarray" defined at ejercicios.ads:42, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__extendarray__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__extendarray__num1 as Ejercicios__extendarray__num1
 use        Ejercicios__extendarray__num2 as Ejercicios__extendarray__num2
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_345 as Temp_____aggregate_def_345
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Temp_____aggregate_def_345___axiom as Temp_____aggregate_def_345___axiom
 use        Ejercicios__extendarray__num1___axiom as Ejercicios__extendarray__num1___axiom
 use        Ejercicios__extendarray__num2___axiom as Ejercicios__extendarray__num2___axiom

 val ejercicios__extendarray__result [@model_trace:3197@result] [@model_projected] [@name:extendArray]  : Array__Int__Standard__integer.map__ref 
 
 let def [#"ejercicios.ads" 42 0 0][@GP_Subp:ejercicios.ads:42] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 42 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:42 *)
  ;
  [#"ejercicios.ads" 42 0 0] assume { [#"ejercicios.ads" 42 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__extendarray__num1.num1 True False True True) };
  [#"ejercicios.ads" 42 0 0] assume { [#"ejercicios.ads" 42 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__extendarray__num2.num2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:42 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:42 *)
  ;
  [#"ejercicios.ads" 42 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:42 *)
  ;
  [#"ejercicios.ads" 42 0 0] try
   ( ();
   ( [@GP_Sloc:ejercicios.adb:101:7] ([#"ejercicios.adb" 101 0 0] ()) );
   ( [@GP_Sloc:ejercicios.adb:102:7] ([#"ejercicios.adb" 102 0 0] ( [#"ejercicios.adb" 102 0 0] (ejercicios__extendarray__result.Array__Int__Standard__integer.map__content <- ( (Temp_____aggregate_def_345.temp_____aggregate_def_345((0 : int)) ((0 : int))) ));
   [#"ejercicios.adb" 102 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  ejercicios__extendarray__result.Array__Int__Standard__integer.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "multiplicacionvector" defined at ejercicios.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ejercicios__multiplicacionvector__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ejercicios__multiplicacionvector__inputarray as Ejercicios__multiplicacionvector__inputarray
 use        Ejercicios__multiplicacionvector__num as Ejercicios__multiplicacionvector__num
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ejercicios__t_array___axiom as Ejercicios__t_array___axiom
 use        Ejercicios__multiplicacionvector__inputarray___axiom as Ejercicios__multiplicacionvector__inputarray___axiom
 use        Ejercicios__multiplicacionvector__num___axiom as Ejercicios__multiplicacionvector__num___axiom

 let def [#"ejercicios.ads" 45 0 0][@GP_Subp:ejercicios.ads:45] 
   (__void_param : unit)
  requires { [#"ejercicios.ads" 45 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram ejercicios.ads:45 *)
  ;
  [#"ejercicios.ads" 45 0 0] assume { [#"ejercicios.ads" 45 0 0] (Ejercicios__t_array___axiom.dynamic_invariant Ejercicios__multiplicacionvector__inputarray.inputarray.Array__Int__Standard__integer.map__content True False True True) };
  [#"ejercicios.ads" 45 0 0] assume { [#"ejercicios.ads" 45 0 0] (Standard__integer___axiom.dynamic_invariant Ejercicios__multiplicacionvector__num.num True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram ejercicios.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram ejercicios.ads:45 *)
  ;
  [#"ejercicios.ads" 45 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram ejercicios.ads:45 *)
  ;
  [#"ejercicios.ads" 45 0 0] try
   ( ();
   ( [@GP_Sloc:ejercicios.adb:110:7] ([#"ejercicios.adb" 110 0 0] ()) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
